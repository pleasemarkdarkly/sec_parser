//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SECCrawler.DAL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("secCrawlerData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class secCrawlerData : global::System.Data.DataSet {
        
        private tblSEC_FormsLocalBLOBDataTable tabletblSEC_FormsLocalBLOB;
        
        private tblSEC_FormsDataTable tabletblSEC_Forms;
        
        private tblSEC_FormTypeDataTable tabletblSEC_FormType;
        
        private tblCOI_InvestigationCompanyDataTable tabletblCOI_InvestigationCompany;
        
        private tblSEC_CompanyNamesDataTable tabletblSEC_CompanyNames;
        
        private tblSEC_Forms_snippetDataTable tabletblSEC_Forms_snippet;
        
        private tblCOI_InvestigationDataTable tabletblCOI_Investigation;
        
        private tblCOI_savedSearchDataTable tabletblCOI_savedSearch;
        
        private global::System.Data.DataRelation relationFK_tblSEC_FormsLocalBLOB_tblSEC_Forms;
        
        private global::System.Data.DataRelation relationFK_tblSEC_Forms_tblSEC_FormType;
        
        private global::System.Data.DataRelation relationFK_tblSEC_Forms_tblSEC_CompanyNames;
        
        private global::System.Data.DataRelation relationFK_tblCOI_InvestigationCompany_tblCOI_Investigation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public secCrawlerData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected secCrawlerData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblSEC_FormsLocalBLOB"] != null)) {
                    base.Tables.Add(new tblSEC_FormsLocalBLOBDataTable(ds.Tables["tblSEC_FormsLocalBLOB"]));
                }
                if ((ds.Tables["tblSEC_Forms"] != null)) {
                    base.Tables.Add(new tblSEC_FormsDataTable(ds.Tables["tblSEC_Forms"]));
                }
                if ((ds.Tables["tblSEC_FormType"] != null)) {
                    base.Tables.Add(new tblSEC_FormTypeDataTable(ds.Tables["tblSEC_FormType"]));
                }
                if ((ds.Tables["tblCOI_InvestigationCompany"] != null)) {
                    base.Tables.Add(new tblCOI_InvestigationCompanyDataTable(ds.Tables["tblCOI_InvestigationCompany"]));
                }
                if ((ds.Tables["tblSEC_CompanyNames"] != null)) {
                    base.Tables.Add(new tblSEC_CompanyNamesDataTable(ds.Tables["tblSEC_CompanyNames"]));
                }
                if ((ds.Tables["tblSEC_Forms_snippet"] != null)) {
                    base.Tables.Add(new tblSEC_Forms_snippetDataTable(ds.Tables["tblSEC_Forms_snippet"]));
                }
                if ((ds.Tables["tblCOI_Investigation"] != null)) {
                    base.Tables.Add(new tblCOI_InvestigationDataTable(ds.Tables["tblCOI_Investigation"]));
                }
                if ((ds.Tables["tblCOI_savedSearch"] != null)) {
                    base.Tables.Add(new tblCOI_savedSearchDataTable(ds.Tables["tblCOI_savedSearch"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSEC_FormsLocalBLOBDataTable tblSEC_FormsLocalBLOB {
            get {
                return this.tabletblSEC_FormsLocalBLOB;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSEC_FormsDataTable tblSEC_Forms {
            get {
                return this.tabletblSEC_Forms;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSEC_FormTypeDataTable tblSEC_FormType {
            get {
                return this.tabletblSEC_FormType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblCOI_InvestigationCompanyDataTable tblCOI_InvestigationCompany {
            get {
                return this.tabletblCOI_InvestigationCompany;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSEC_CompanyNamesDataTable tblSEC_CompanyNames {
            get {
                return this.tabletblSEC_CompanyNames;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSEC_Forms_snippetDataTable tblSEC_Forms_snippet {
            get {
                return this.tabletblSEC_Forms_snippet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblCOI_InvestigationDataTable tblCOI_Investigation {
            get {
                return this.tabletblCOI_Investigation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblCOI_savedSearchDataTable tblCOI_savedSearch {
            get {
                return this.tabletblCOI_savedSearch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            secCrawlerData cln = ((secCrawlerData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblSEC_FormsLocalBLOB"] != null)) {
                    base.Tables.Add(new tblSEC_FormsLocalBLOBDataTable(ds.Tables["tblSEC_FormsLocalBLOB"]));
                }
                if ((ds.Tables["tblSEC_Forms"] != null)) {
                    base.Tables.Add(new tblSEC_FormsDataTable(ds.Tables["tblSEC_Forms"]));
                }
                if ((ds.Tables["tblSEC_FormType"] != null)) {
                    base.Tables.Add(new tblSEC_FormTypeDataTable(ds.Tables["tblSEC_FormType"]));
                }
                if ((ds.Tables["tblCOI_InvestigationCompany"] != null)) {
                    base.Tables.Add(new tblCOI_InvestigationCompanyDataTable(ds.Tables["tblCOI_InvestigationCompany"]));
                }
                if ((ds.Tables["tblSEC_CompanyNames"] != null)) {
                    base.Tables.Add(new tblSEC_CompanyNamesDataTable(ds.Tables["tblSEC_CompanyNames"]));
                }
                if ((ds.Tables["tblSEC_Forms_snippet"] != null)) {
                    base.Tables.Add(new tblSEC_Forms_snippetDataTable(ds.Tables["tblSEC_Forms_snippet"]));
                }
                if ((ds.Tables["tblCOI_Investigation"] != null)) {
                    base.Tables.Add(new tblCOI_InvestigationDataTable(ds.Tables["tblCOI_Investigation"]));
                }
                if ((ds.Tables["tblCOI_savedSearch"] != null)) {
                    base.Tables.Add(new tblCOI_savedSearchDataTable(ds.Tables["tblCOI_savedSearch"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblSEC_FormsLocalBLOB = ((tblSEC_FormsLocalBLOBDataTable)(base.Tables["tblSEC_FormsLocalBLOB"]));
            if ((initTable == true)) {
                if ((this.tabletblSEC_FormsLocalBLOB != null)) {
                    this.tabletblSEC_FormsLocalBLOB.InitVars();
                }
            }
            this.tabletblSEC_Forms = ((tblSEC_FormsDataTable)(base.Tables["tblSEC_Forms"]));
            if ((initTable == true)) {
                if ((this.tabletblSEC_Forms != null)) {
                    this.tabletblSEC_Forms.InitVars();
                }
            }
            this.tabletblSEC_FormType = ((tblSEC_FormTypeDataTable)(base.Tables["tblSEC_FormType"]));
            if ((initTable == true)) {
                if ((this.tabletblSEC_FormType != null)) {
                    this.tabletblSEC_FormType.InitVars();
                }
            }
            this.tabletblCOI_InvestigationCompany = ((tblCOI_InvestigationCompanyDataTable)(base.Tables["tblCOI_InvestigationCompany"]));
            if ((initTable == true)) {
                if ((this.tabletblCOI_InvestigationCompany != null)) {
                    this.tabletblCOI_InvestigationCompany.InitVars();
                }
            }
            this.tabletblSEC_CompanyNames = ((tblSEC_CompanyNamesDataTable)(base.Tables["tblSEC_CompanyNames"]));
            if ((initTable == true)) {
                if ((this.tabletblSEC_CompanyNames != null)) {
                    this.tabletblSEC_CompanyNames.InitVars();
                }
            }
            this.tabletblSEC_Forms_snippet = ((tblSEC_Forms_snippetDataTable)(base.Tables["tblSEC_Forms_snippet"]));
            if ((initTable == true)) {
                if ((this.tabletblSEC_Forms_snippet != null)) {
                    this.tabletblSEC_Forms_snippet.InitVars();
                }
            }
            this.tabletblCOI_Investigation = ((tblCOI_InvestigationDataTable)(base.Tables["tblCOI_Investigation"]));
            if ((initTable == true)) {
                if ((this.tabletblCOI_Investigation != null)) {
                    this.tabletblCOI_Investigation.InitVars();
                }
            }
            this.tabletblCOI_savedSearch = ((tblCOI_savedSearchDataTable)(base.Tables["tblCOI_savedSearch"]));
            if ((initTable == true)) {
                if ((this.tabletblCOI_savedSearch != null)) {
                    this.tabletblCOI_savedSearch.InitVars();
                }
            }
            this.relationFK_tblSEC_FormsLocalBLOB_tblSEC_Forms = this.Relations["FK_tblSEC_FormsLocalBLOB_tblSEC_Forms"];
            this.relationFK_tblSEC_Forms_tblSEC_FormType = this.Relations["FK_tblSEC_Forms_tblSEC_FormType"];
            this.relationFK_tblSEC_Forms_tblSEC_CompanyNames = this.Relations["FK_tblSEC_Forms_tblSEC_CompanyNames"];
            this.relationFK_tblCOI_InvestigationCompany_tblCOI_Investigation = this.Relations["FK_tblCOI_InvestigationCompany_tblCOI_Investigation"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "secCrawlerData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/secCrawlerData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblSEC_FormsLocalBLOB = new tblSEC_FormsLocalBLOBDataTable();
            base.Tables.Add(this.tabletblSEC_FormsLocalBLOB);
            this.tabletblSEC_Forms = new tblSEC_FormsDataTable();
            base.Tables.Add(this.tabletblSEC_Forms);
            this.tabletblSEC_FormType = new tblSEC_FormTypeDataTable();
            base.Tables.Add(this.tabletblSEC_FormType);
            this.tabletblCOI_InvestigationCompany = new tblCOI_InvestigationCompanyDataTable();
            base.Tables.Add(this.tabletblCOI_InvestigationCompany);
            this.tabletblSEC_CompanyNames = new tblSEC_CompanyNamesDataTable();
            base.Tables.Add(this.tabletblSEC_CompanyNames);
            this.tabletblSEC_Forms_snippet = new tblSEC_Forms_snippetDataTable();
            base.Tables.Add(this.tabletblSEC_Forms_snippet);
            this.tabletblCOI_Investigation = new tblCOI_InvestigationDataTable();
            base.Tables.Add(this.tabletblCOI_Investigation);
            this.tabletblCOI_savedSearch = new tblCOI_savedSearchDataTable();
            base.Tables.Add(this.tabletblCOI_savedSearch);
            this.relationFK_tblSEC_FormsLocalBLOB_tblSEC_Forms = new global::System.Data.DataRelation("FK_tblSEC_FormsLocalBLOB_tblSEC_Forms", new global::System.Data.DataColumn[] {
                        this.tabletblSEC_Forms.FormIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletblSEC_FormsLocalBLOB.FormIDColumn}, false);
            this.Relations.Add(this.relationFK_tblSEC_FormsLocalBLOB_tblSEC_Forms);
            this.relationFK_tblSEC_Forms_tblSEC_FormType = new global::System.Data.DataRelation("FK_tblSEC_Forms_tblSEC_FormType", new global::System.Data.DataColumn[] {
                        this.tabletblSEC_FormType.formtypeColumn}, new global::System.Data.DataColumn[] {
                        this.tabletblSEC_Forms.FormTypeColumn}, false);
            this.Relations.Add(this.relationFK_tblSEC_Forms_tblSEC_FormType);
            this.relationFK_tblSEC_Forms_tblSEC_CompanyNames = new global::System.Data.DataRelation("FK_tblSEC_Forms_tblSEC_CompanyNames", new global::System.Data.DataColumn[] {
                        this.tabletblSEC_CompanyNames.CompanyCIKColumn,
                        this.tabletblSEC_CompanyNames.CompanyNameColumn}, new global::System.Data.DataColumn[] {
                        this.tabletblSEC_Forms.CompanyCIKColumn,
                        this.tabletblSEC_Forms.CompanyNameColumn}, false);
            this.Relations.Add(this.relationFK_tblSEC_Forms_tblSEC_CompanyNames);
            this.relationFK_tblCOI_InvestigationCompany_tblCOI_Investigation = new global::System.Data.DataRelation("FK_tblCOI_InvestigationCompany_tblCOI_Investigation", new global::System.Data.DataColumn[] {
                        this.tabletblCOI_Investigation.InvestigationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletblCOI_InvestigationCompany.InvestigationIDColumn}, false);
            this.Relations.Add(this.relationFK_tblCOI_InvestigationCompany_tblCOI_Investigation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSEC_FormsLocalBLOB() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSEC_Forms() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSEC_FormType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblCOI_InvestigationCompany() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSEC_CompanyNames() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSEC_Forms_snippet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblCOI_Investigation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblCOI_savedSearch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            secCrawlerData ds = new secCrawlerData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblSEC_FormsLocalBLOBRowChangeEventHandler(object sender, tblSEC_FormsLocalBLOBRowChangeEvent e);
        
        public delegate void tblSEC_FormsRowChangeEventHandler(object sender, tblSEC_FormsRowChangeEvent e);
        
        public delegate void tblSEC_FormTypeRowChangeEventHandler(object sender, tblSEC_FormTypeRowChangeEvent e);
        
        public delegate void tblCOI_InvestigationCompanyRowChangeEventHandler(object sender, tblCOI_InvestigationCompanyRowChangeEvent e);
        
        public delegate void tblSEC_CompanyNamesRowChangeEventHandler(object sender, tblSEC_CompanyNamesRowChangeEvent e);
        
        public delegate void tblSEC_Forms_snippetRowChangeEventHandler(object sender, tblSEC_Forms_snippetRowChangeEvent e);
        
        public delegate void tblCOI_InvestigationRowChangeEventHandler(object sender, tblCOI_InvestigationRowChangeEvent e);
        
        public delegate void tblCOI_savedSearchRowChangeEventHandler(object sender, tblCOI_savedSearchRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSEC_FormsLocalBLOBDataTable : global::System.Data.TypedTableBase<tblSEC_FormsLocalBLOBRow> {
            
            private global::System.Data.DataColumn columnFormID;
            
            private global::System.Data.DataColumn columnText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBDataTable() {
                this.TableName = "tblSEC_FormsLocalBLOB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_FormsLocalBLOBDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSEC_FormsLocalBLOBDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormIDColumn {
                get {
                    return this.columnFormID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRow this[int index] {
                get {
                    return ((tblSEC_FormsLocalBLOBRow)(this.Rows[index]));
                }
            }
            
            public event tblSEC_FormsLocalBLOBRowChangeEventHandler tblSEC_FormsLocalBLOBRowChanging;
            
            public event tblSEC_FormsLocalBLOBRowChangeEventHandler tblSEC_FormsLocalBLOBRowChanged;
            
            public event tblSEC_FormsLocalBLOBRowChangeEventHandler tblSEC_FormsLocalBLOBRowDeleting;
            
            public event tblSEC_FormsLocalBLOBRowChangeEventHandler tblSEC_FormsLocalBLOBRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSEC_FormsLocalBLOBRow(tblSEC_FormsLocalBLOBRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRow AddtblSEC_FormsLocalBLOBRow(tblSEC_FormsRow parenttblSEC_FormsRowByFK_tblSEC_FormsLocalBLOB_tblSEC_Forms, string Text) {
                tblSEC_FormsLocalBLOBRow rowtblSEC_FormsLocalBLOBRow = ((tblSEC_FormsLocalBLOBRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Text};
                if ((parenttblSEC_FormsRowByFK_tblSEC_FormsLocalBLOB_tblSEC_Forms != null)) {
                    columnValuesArray[0] = parenttblSEC_FormsRowByFK_tblSEC_FormsLocalBLOB_tblSEC_Forms[0];
                }
                rowtblSEC_FormsLocalBLOBRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblSEC_FormsLocalBLOBRow);
                return rowtblSEC_FormsLocalBLOBRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRow FindByFormID(System.Guid FormID) {
                return ((tblSEC_FormsLocalBLOBRow)(this.Rows.Find(new object[] {
                            FormID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblSEC_FormsLocalBLOBDataTable cln = ((tblSEC_FormsLocalBLOBDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblSEC_FormsLocalBLOBDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormID = base.Columns["FormID"];
                this.columnText = base.Columns["Text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormID = new global::System.Data.DataColumn("FormID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFormID}, true));
                this.columnFormID.AllowDBNull = false;
                this.columnFormID.Unique = true;
                this.columnText.AllowDBNull = false;
                this.columnText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRow NewtblSEC_FormsLocalBLOBRow() {
                return ((tblSEC_FormsLocalBLOBRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblSEC_FormsLocalBLOBRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblSEC_FormsLocalBLOBRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSEC_FormsLocalBLOBRowChanged != null)) {
                    this.tblSEC_FormsLocalBLOBRowChanged(this, new tblSEC_FormsLocalBLOBRowChangeEvent(((tblSEC_FormsLocalBLOBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSEC_FormsLocalBLOBRowChanging != null)) {
                    this.tblSEC_FormsLocalBLOBRowChanging(this, new tblSEC_FormsLocalBLOBRowChangeEvent(((tblSEC_FormsLocalBLOBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSEC_FormsLocalBLOBRowDeleted != null)) {
                    this.tblSEC_FormsLocalBLOBRowDeleted(this, new tblSEC_FormsLocalBLOBRowChangeEvent(((tblSEC_FormsLocalBLOBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSEC_FormsLocalBLOBRowDeleting != null)) {
                    this.tblSEC_FormsLocalBLOBRowDeleting(this, new tblSEC_FormsLocalBLOBRowChangeEvent(((tblSEC_FormsLocalBLOBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSEC_FormsLocalBLOBRow(tblSEC_FormsLocalBLOBRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSEC_FormsLocalBLOBDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSEC_FormsDataTable : global::System.Data.TypedTableBase<tblSEC_FormsRow> {
            
            private global::System.Data.DataColumn columnFormID;
            
            private global::System.Data.DataColumn columnCompanyCIK;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnFormType;
            
            private global::System.Data.DataColumn columnFormDate;
            
            private global::System.Data.DataColumn columnFormPartialURL;
            
            private global::System.Data.DataColumn columnLastDownloaded;
            
            private global::System.Data.DataColumn columnLastIngested;
            
            private global::System.Data.DataColumn columnLastParsed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsDataTable() {
                this.TableName = "tblSEC_Forms";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_FormsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSEC_FormsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormIDColumn {
                get {
                    return this.columnFormID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCIKColumn {
                get {
                    return this.columnCompanyCIK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormTypeColumn {
                get {
                    return this.columnFormType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormDateColumn {
                get {
                    return this.columnFormDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormPartialURLColumn {
                get {
                    return this.columnFormPartialURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastDownloadedColumn {
                get {
                    return this.columnLastDownloaded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastIngestedColumn {
                get {
                    return this.columnLastIngested;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastParsedColumn {
                get {
                    return this.columnLastParsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow this[int index] {
                get {
                    return ((tblSEC_FormsRow)(this.Rows[index]));
                }
            }
            
            public event tblSEC_FormsRowChangeEventHandler tblSEC_FormsRowChanging;
            
            public event tblSEC_FormsRowChangeEventHandler tblSEC_FormsRowChanged;
            
            public event tblSEC_FormsRowChangeEventHandler tblSEC_FormsRowDeleting;
            
            public event tblSEC_FormsRowChangeEventHandler tblSEC_FormsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSEC_FormsRow(tblSEC_FormsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow AddtblSEC_FormsRow(System.Guid FormID, decimal CompanyCIK, string CompanyName, tblSEC_FormTypeRow parenttblSEC_FormTypeRowByFK_tblSEC_Forms_tblSEC_FormType, System.DateTime FormDate, string FormPartialURL, System.DateTime LastDownloaded, System.DateTime LastIngested, System.DateTime LastParsed) {
                tblSEC_FormsRow rowtblSEC_FormsRow = ((tblSEC_FormsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FormID,
                        CompanyCIK,
                        CompanyName,
                        null,
                        FormDate,
                        FormPartialURL,
                        LastDownloaded,
                        LastIngested,
                        LastParsed};
                if ((parenttblSEC_FormTypeRowByFK_tblSEC_Forms_tblSEC_FormType != null)) {
                    columnValuesArray[3] = parenttblSEC_FormTypeRowByFK_tblSEC_Forms_tblSEC_FormType[0];
                }
                rowtblSEC_FormsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblSEC_FormsRow);
                return rowtblSEC_FormsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow FindByFormID(System.Guid FormID) {
                return ((tblSEC_FormsRow)(this.Rows.Find(new object[] {
                            FormID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblSEC_FormsDataTable cln = ((tblSEC_FormsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblSEC_FormsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormID = base.Columns["FormID"];
                this.columnCompanyCIK = base.Columns["CompanyCIK"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnFormType = base.Columns["FormType"];
                this.columnFormDate = base.Columns["FormDate"];
                this.columnFormPartialURL = base.Columns["FormPartialURL"];
                this.columnLastDownloaded = base.Columns["LastDownloaded"];
                this.columnLastIngested = base.Columns["LastIngested"];
                this.columnLastParsed = base.Columns["LastParsed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormID = new global::System.Data.DataColumn("FormID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnCompanyCIK = new global::System.Data.DataColumn("CompanyCIK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCIK);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnFormType = new global::System.Data.DataColumn("FormType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormType);
                this.columnFormDate = new global::System.Data.DataColumn("FormDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormDate);
                this.columnFormPartialURL = new global::System.Data.DataColumn("FormPartialURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormPartialURL);
                this.columnLastDownloaded = new global::System.Data.DataColumn("LastDownloaded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastDownloaded);
                this.columnLastIngested = new global::System.Data.DataColumn("LastIngested", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastIngested);
                this.columnLastParsed = new global::System.Data.DataColumn("LastParsed", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastParsed);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFormID}, true));
                this.columnFormID.AllowDBNull = false;
                this.columnFormID.Unique = true;
                this.columnCompanyCIK.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 250;
                this.columnFormType.AllowDBNull = false;
                this.columnFormType.MaxLength = 15;
                this.columnFormDate.AllowDBNull = false;
                this.columnFormPartialURL.AllowDBNull = false;
                this.columnFormPartialURL.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow NewtblSEC_FormsRow() {
                return ((tblSEC_FormsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblSEC_FormsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblSEC_FormsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSEC_FormsRowChanged != null)) {
                    this.tblSEC_FormsRowChanged(this, new tblSEC_FormsRowChangeEvent(((tblSEC_FormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSEC_FormsRowChanging != null)) {
                    this.tblSEC_FormsRowChanging(this, new tblSEC_FormsRowChangeEvent(((tblSEC_FormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSEC_FormsRowDeleted != null)) {
                    this.tblSEC_FormsRowDeleted(this, new tblSEC_FormsRowChangeEvent(((tblSEC_FormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSEC_FormsRowDeleting != null)) {
                    this.tblSEC_FormsRowDeleting(this, new tblSEC_FormsRowChangeEvent(((tblSEC_FormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSEC_FormsRow(tblSEC_FormsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSEC_FormsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSEC_FormTypeDataTable : global::System.Data.TypedTableBase<tblSEC_FormTypeRow> {
            
            private global::System.Data.DataColumn columnformtype;
            
            private global::System.Data.DataColumn columnalwaysDownload;
            
            private global::System.Data.DataColumn columnalwaysIngest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeDataTable() {
                this.TableName = "tblSEC_FormType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_FormTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSEC_FormTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn formtypeColumn {
                get {
                    return this.columnformtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alwaysDownloadColumn {
                get {
                    return this.columnalwaysDownload;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alwaysIngestColumn {
                get {
                    return this.columnalwaysIngest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRow this[int index] {
                get {
                    return ((tblSEC_FormTypeRow)(this.Rows[index]));
                }
            }
            
            public event tblSEC_FormTypeRowChangeEventHandler tblSEC_FormTypeRowChanging;
            
            public event tblSEC_FormTypeRowChangeEventHandler tblSEC_FormTypeRowChanged;
            
            public event tblSEC_FormTypeRowChangeEventHandler tblSEC_FormTypeRowDeleting;
            
            public event tblSEC_FormTypeRowChangeEventHandler tblSEC_FormTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSEC_FormTypeRow(tblSEC_FormTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRow AddtblSEC_FormTypeRow(string formtype, bool alwaysDownload, bool alwaysIngest) {
                tblSEC_FormTypeRow rowtblSEC_FormTypeRow = ((tblSEC_FormTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        formtype,
                        alwaysDownload,
                        alwaysIngest};
                rowtblSEC_FormTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblSEC_FormTypeRow);
                return rowtblSEC_FormTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRow FindByformtype(string formtype) {
                return ((tblSEC_FormTypeRow)(this.Rows.Find(new object[] {
                            formtype})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblSEC_FormTypeDataTable cln = ((tblSEC_FormTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblSEC_FormTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnformtype = base.Columns["formtype"];
                this.columnalwaysDownload = base.Columns["alwaysDownload"];
                this.columnalwaysIngest = base.Columns["alwaysIngest"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnformtype = new global::System.Data.DataColumn("formtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnformtype);
                this.columnalwaysDownload = new global::System.Data.DataColumn("alwaysDownload", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalwaysDownload);
                this.columnalwaysIngest = new global::System.Data.DataColumn("alwaysIngest", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalwaysIngest);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnformtype}, true));
                this.columnformtype.AllowDBNull = false;
                this.columnformtype.Unique = true;
                this.columnformtype.MaxLength = 15;
                this.columnalwaysDownload.AllowDBNull = false;
                this.columnalwaysIngest.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRow NewtblSEC_FormTypeRow() {
                return ((tblSEC_FormTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblSEC_FormTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblSEC_FormTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSEC_FormTypeRowChanged != null)) {
                    this.tblSEC_FormTypeRowChanged(this, new tblSEC_FormTypeRowChangeEvent(((tblSEC_FormTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSEC_FormTypeRowChanging != null)) {
                    this.tblSEC_FormTypeRowChanging(this, new tblSEC_FormTypeRowChangeEvent(((tblSEC_FormTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSEC_FormTypeRowDeleted != null)) {
                    this.tblSEC_FormTypeRowDeleted(this, new tblSEC_FormTypeRowChangeEvent(((tblSEC_FormTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSEC_FormTypeRowDeleting != null)) {
                    this.tblSEC_FormTypeRowDeleting(this, new tblSEC_FormTypeRowChangeEvent(((tblSEC_FormTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSEC_FormTypeRow(tblSEC_FormTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSEC_FormTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblCOI_InvestigationCompanyDataTable : global::System.Data.TypedTableBase<tblCOI_InvestigationCompanyRow> {
            
            private global::System.Data.DataColumn columnCompanyCIK;
            
            private global::System.Data.DataColumn columnInvestigationID;
            
            private global::System.Data.DataColumn columnisExcluded;
            
            private global::System.Data.DataColumn columnMatchFoundVia;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyDataTable() {
                this.TableName = "tblCOI_InvestigationCompany";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblCOI_InvestigationCompanyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblCOI_InvestigationCompanyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCIKColumn {
                get {
                    return this.columnCompanyCIK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestigationIDColumn {
                get {
                    return this.columnInvestigationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isExcludedColumn {
                get {
                    return this.columnisExcluded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MatchFoundViaColumn {
                get {
                    return this.columnMatchFoundVia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRow this[int index] {
                get {
                    return ((tblCOI_InvestigationCompanyRow)(this.Rows[index]));
                }
            }
            
            public event tblCOI_InvestigationCompanyRowChangeEventHandler tblCOI_InvestigationCompanyRowChanging;
            
            public event tblCOI_InvestigationCompanyRowChangeEventHandler tblCOI_InvestigationCompanyRowChanged;
            
            public event tblCOI_InvestigationCompanyRowChangeEventHandler tblCOI_InvestigationCompanyRowDeleting;
            
            public event tblCOI_InvestigationCompanyRowChangeEventHandler tblCOI_InvestigationCompanyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblCOI_InvestigationCompanyRow(tblCOI_InvestigationCompanyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRow AddtblCOI_InvestigationCompanyRow(decimal CompanyCIK, tblCOI_InvestigationRow parenttblCOI_InvestigationRowByFK_tblCOI_InvestigationCompany_tblCOI_Investigation, bool isExcluded, string MatchFoundVia) {
                tblCOI_InvestigationCompanyRow rowtblCOI_InvestigationCompanyRow = ((tblCOI_InvestigationCompanyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CompanyCIK,
                        null,
                        isExcluded,
                        MatchFoundVia};
                if ((parenttblCOI_InvestigationRowByFK_tblCOI_InvestigationCompany_tblCOI_Investigation != null)) {
                    columnValuesArray[1] = parenttblCOI_InvestigationRowByFK_tblCOI_InvestigationCompany_tblCOI_Investigation[0];
                }
                rowtblCOI_InvestigationCompanyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblCOI_InvestigationCompanyRow);
                return rowtblCOI_InvestigationCompanyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRow FindByCompanyCIKInvestigationID(decimal CompanyCIK, int InvestigationID) {
                return ((tblCOI_InvestigationCompanyRow)(this.Rows.Find(new object[] {
                            CompanyCIK,
                            InvestigationID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblCOI_InvestigationCompanyDataTable cln = ((tblCOI_InvestigationCompanyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblCOI_InvestigationCompanyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompanyCIK = base.Columns["CompanyCIK"];
                this.columnInvestigationID = base.Columns["InvestigationID"];
                this.columnisExcluded = base.Columns["isExcluded"];
                this.columnMatchFoundVia = base.Columns["MatchFoundVia"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompanyCIK = new global::System.Data.DataColumn("CompanyCIK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCIK);
                this.columnInvestigationID = new global::System.Data.DataColumn("InvestigationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestigationID);
                this.columnisExcluded = new global::System.Data.DataColumn("isExcluded", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisExcluded);
                this.columnMatchFoundVia = new global::System.Data.DataColumn("MatchFoundVia", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMatchFoundVia);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompanyCIK,
                                this.columnInvestigationID}, true));
                this.columnCompanyCIK.AllowDBNull = false;
                this.columnInvestigationID.AllowDBNull = false;
                this.columnisExcluded.AllowDBNull = false;
                this.columnMatchFoundVia.AllowDBNull = false;
                this.columnMatchFoundVia.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRow NewtblCOI_InvestigationCompanyRow() {
                return ((tblCOI_InvestigationCompanyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblCOI_InvestigationCompanyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblCOI_InvestigationCompanyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblCOI_InvestigationCompanyRowChanged != null)) {
                    this.tblCOI_InvestigationCompanyRowChanged(this, new tblCOI_InvestigationCompanyRowChangeEvent(((tblCOI_InvestigationCompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblCOI_InvestigationCompanyRowChanging != null)) {
                    this.tblCOI_InvestigationCompanyRowChanging(this, new tblCOI_InvestigationCompanyRowChangeEvent(((tblCOI_InvestigationCompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblCOI_InvestigationCompanyRowDeleted != null)) {
                    this.tblCOI_InvestigationCompanyRowDeleted(this, new tblCOI_InvestigationCompanyRowChangeEvent(((tblCOI_InvestigationCompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblCOI_InvestigationCompanyRowDeleting != null)) {
                    this.tblCOI_InvestigationCompanyRowDeleting(this, new tblCOI_InvestigationCompanyRowChangeEvent(((tblCOI_InvestigationCompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblCOI_InvestigationCompanyRow(tblCOI_InvestigationCompanyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblCOI_InvestigationCompanyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSEC_CompanyNamesDataTable : global::System.Data.TypedTableBase<tblSEC_CompanyNamesRow> {
            
            private global::System.Data.DataColumn columnCompanyCIK;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesDataTable() {
                this.TableName = "tblSEC_CompanyNames";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_CompanyNamesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSEC_CompanyNamesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCIKColumn {
                get {
                    return this.columnCompanyCIK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRow this[int index] {
                get {
                    return ((tblSEC_CompanyNamesRow)(this.Rows[index]));
                }
            }
            
            public event tblSEC_CompanyNamesRowChangeEventHandler tblSEC_CompanyNamesRowChanging;
            
            public event tblSEC_CompanyNamesRowChangeEventHandler tblSEC_CompanyNamesRowChanged;
            
            public event tblSEC_CompanyNamesRowChangeEventHandler tblSEC_CompanyNamesRowDeleting;
            
            public event tblSEC_CompanyNamesRowChangeEventHandler tblSEC_CompanyNamesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSEC_CompanyNamesRow(tblSEC_CompanyNamesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRow AddtblSEC_CompanyNamesRow(decimal CompanyCIK, string CompanyName) {
                tblSEC_CompanyNamesRow rowtblSEC_CompanyNamesRow = ((tblSEC_CompanyNamesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CompanyCIK,
                        CompanyName};
                rowtblSEC_CompanyNamesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblSEC_CompanyNamesRow);
                return rowtblSEC_CompanyNamesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRow FindByCompanyCIKCompanyName(decimal CompanyCIK, string CompanyName) {
                return ((tblSEC_CompanyNamesRow)(this.Rows.Find(new object[] {
                            CompanyCIK,
                            CompanyName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblSEC_CompanyNamesDataTable cln = ((tblSEC_CompanyNamesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblSEC_CompanyNamesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompanyCIK = base.Columns["CompanyCIK"];
                this.columnCompanyName = base.Columns["CompanyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompanyCIK = new global::System.Data.DataColumn("CompanyCIK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCIK);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompanyCIK,
                                this.columnCompanyName}, true));
                this.columnCompanyCIK.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRow NewtblSEC_CompanyNamesRow() {
                return ((tblSEC_CompanyNamesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblSEC_CompanyNamesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblSEC_CompanyNamesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSEC_CompanyNamesRowChanged != null)) {
                    this.tblSEC_CompanyNamesRowChanged(this, new tblSEC_CompanyNamesRowChangeEvent(((tblSEC_CompanyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSEC_CompanyNamesRowChanging != null)) {
                    this.tblSEC_CompanyNamesRowChanging(this, new tblSEC_CompanyNamesRowChangeEvent(((tblSEC_CompanyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSEC_CompanyNamesRowDeleted != null)) {
                    this.tblSEC_CompanyNamesRowDeleted(this, new tblSEC_CompanyNamesRowChangeEvent(((tblSEC_CompanyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSEC_CompanyNamesRowDeleting != null)) {
                    this.tblSEC_CompanyNamesRowDeleting(this, new tblSEC_CompanyNamesRowChangeEvent(((tblSEC_CompanyNamesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSEC_CompanyNamesRow(tblSEC_CompanyNamesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSEC_CompanyNamesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSEC_Forms_snippetDataTable : global::System.Data.TypedTableBase<tblSEC_Forms_snippetRow> {
            
            private global::System.Data.DataColumn columnFormID;
            
            private global::System.Data.DataColumn columnsubdoc_sequence;
            
            private global::System.Data.DataColumn columnsnippet;
            
            private global::System.Data.DataColumn columncriteria;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetDataTable() {
                this.TableName = "tblSEC_Forms_snippet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_Forms_snippetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSEC_Forms_snippetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormIDColumn {
                get {
                    return this.columnFormID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subdoc_sequenceColumn {
                get {
                    return this.columnsubdoc_sequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snippetColumn {
                get {
                    return this.columnsnippet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn criteriaColumn {
                get {
                    return this.columncriteria;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetRow this[int index] {
                get {
                    return ((tblSEC_Forms_snippetRow)(this.Rows[index]));
                }
            }
            
            public event tblSEC_Forms_snippetRowChangeEventHandler tblSEC_Forms_snippetRowChanging;
            
            public event tblSEC_Forms_snippetRowChangeEventHandler tblSEC_Forms_snippetRowChanged;
            
            public event tblSEC_Forms_snippetRowChangeEventHandler tblSEC_Forms_snippetRowDeleting;
            
            public event tblSEC_Forms_snippetRowChangeEventHandler tblSEC_Forms_snippetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSEC_Forms_snippetRow(tblSEC_Forms_snippetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetRow AddtblSEC_Forms_snippetRow(System.Guid FormID, int subdoc_sequence, string snippet, string criteria) {
                tblSEC_Forms_snippetRow rowtblSEC_Forms_snippetRow = ((tblSEC_Forms_snippetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FormID,
                        subdoc_sequence,
                        snippet,
                        criteria};
                rowtblSEC_Forms_snippetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblSEC_Forms_snippetRow);
                return rowtblSEC_Forms_snippetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetRow FindByFormIDsubdoc_sequence(System.Guid FormID, int subdoc_sequence) {
                return ((tblSEC_Forms_snippetRow)(this.Rows.Find(new object[] {
                            FormID,
                            subdoc_sequence})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblSEC_Forms_snippetDataTable cln = ((tblSEC_Forms_snippetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblSEC_Forms_snippetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormID = base.Columns["FormID"];
                this.columnsubdoc_sequence = base.Columns["subdoc_sequence"];
                this.columnsnippet = base.Columns["snippet"];
                this.columncriteria = base.Columns["criteria"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormID = new global::System.Data.DataColumn("FormID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnsubdoc_sequence = new global::System.Data.DataColumn("subdoc_sequence", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubdoc_sequence);
                this.columnsnippet = new global::System.Data.DataColumn("snippet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnippet);
                this.columncriteria = new global::System.Data.DataColumn("criteria", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncriteria);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFormID,
                                this.columnsubdoc_sequence}, true));
                this.columnFormID.AllowDBNull = false;
                this.columnsubdoc_sequence.AllowDBNull = false;
                this.columnsnippet.AllowDBNull = false;
                this.columnsnippet.MaxLength = 2147483647;
                this.columncriteria.AllowDBNull = false;
                this.columncriteria.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetRow NewtblSEC_Forms_snippetRow() {
                return ((tblSEC_Forms_snippetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblSEC_Forms_snippetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblSEC_Forms_snippetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSEC_Forms_snippetRowChanged != null)) {
                    this.tblSEC_Forms_snippetRowChanged(this, new tblSEC_Forms_snippetRowChangeEvent(((tblSEC_Forms_snippetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSEC_Forms_snippetRowChanging != null)) {
                    this.tblSEC_Forms_snippetRowChanging(this, new tblSEC_Forms_snippetRowChangeEvent(((tblSEC_Forms_snippetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSEC_Forms_snippetRowDeleted != null)) {
                    this.tblSEC_Forms_snippetRowDeleted(this, new tblSEC_Forms_snippetRowChangeEvent(((tblSEC_Forms_snippetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSEC_Forms_snippetRowDeleting != null)) {
                    this.tblSEC_Forms_snippetRowDeleting(this, new tblSEC_Forms_snippetRowChangeEvent(((tblSEC_Forms_snippetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSEC_Forms_snippetRow(tblSEC_Forms_snippetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSEC_Forms_snippetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblCOI_InvestigationDataTable : global::System.Data.TypedTableBase<tblCOI_InvestigationRow> {
            
            private global::System.Data.DataColumn columnInvestigationID;
            
            private global::System.Data.DataColumn columnInvestigationShortName;
            
            private global::System.Data.DataColumn columnInvestigationNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationDataTable() {
                this.TableName = "tblCOI_Investigation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblCOI_InvestigationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblCOI_InvestigationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestigationIDColumn {
                get {
                    return this.columnInvestigationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestigationShortNameColumn {
                get {
                    return this.columnInvestigationShortName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestigationNotesColumn {
                get {
                    return this.columnInvestigationNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRow this[int index] {
                get {
                    return ((tblCOI_InvestigationRow)(this.Rows[index]));
                }
            }
            
            public event tblCOI_InvestigationRowChangeEventHandler tblCOI_InvestigationRowChanging;
            
            public event tblCOI_InvestigationRowChangeEventHandler tblCOI_InvestigationRowChanged;
            
            public event tblCOI_InvestigationRowChangeEventHandler tblCOI_InvestigationRowDeleting;
            
            public event tblCOI_InvestigationRowChangeEventHandler tblCOI_InvestigationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblCOI_InvestigationRow(tblCOI_InvestigationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRow AddtblCOI_InvestigationRow(string InvestigationShortName, string InvestigationNotes) {
                tblCOI_InvestigationRow rowtblCOI_InvestigationRow = ((tblCOI_InvestigationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        InvestigationShortName,
                        InvestigationNotes};
                rowtblCOI_InvestigationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblCOI_InvestigationRow);
                return rowtblCOI_InvestigationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRow FindByInvestigationID(int InvestigationID) {
                return ((tblCOI_InvestigationRow)(this.Rows.Find(new object[] {
                            InvestigationID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblCOI_InvestigationDataTable cln = ((tblCOI_InvestigationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblCOI_InvestigationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInvestigationID = base.Columns["InvestigationID"];
                this.columnInvestigationShortName = base.Columns["InvestigationShortName"];
                this.columnInvestigationNotes = base.Columns["InvestigationNotes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInvestigationID = new global::System.Data.DataColumn("InvestigationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestigationID);
                this.columnInvestigationShortName = new global::System.Data.DataColumn("InvestigationShortName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestigationShortName);
                this.columnInvestigationNotes = new global::System.Data.DataColumn("InvestigationNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestigationNotes);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInvestigationID}, true));
                this.columnInvestigationID.AutoIncrement = true;
                this.columnInvestigationID.AutoIncrementSeed = -1;
                this.columnInvestigationID.AutoIncrementStep = -1;
                this.columnInvestigationID.AllowDBNull = false;
                this.columnInvestigationID.ReadOnly = true;
                this.columnInvestigationID.Unique = true;
                this.columnInvestigationShortName.AllowDBNull = false;
                this.columnInvestigationShortName.MaxLength = 250;
                this.columnInvestigationNotes.AllowDBNull = false;
                this.columnInvestigationNotes.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRow NewtblCOI_InvestigationRow() {
                return ((tblCOI_InvestigationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblCOI_InvestigationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblCOI_InvestigationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblCOI_InvestigationRowChanged != null)) {
                    this.tblCOI_InvestigationRowChanged(this, new tblCOI_InvestigationRowChangeEvent(((tblCOI_InvestigationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblCOI_InvestigationRowChanging != null)) {
                    this.tblCOI_InvestigationRowChanging(this, new tblCOI_InvestigationRowChangeEvent(((tblCOI_InvestigationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblCOI_InvestigationRowDeleted != null)) {
                    this.tblCOI_InvestigationRowDeleted(this, new tblCOI_InvestigationRowChangeEvent(((tblCOI_InvestigationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblCOI_InvestigationRowDeleting != null)) {
                    this.tblCOI_InvestigationRowDeleting(this, new tblCOI_InvestigationRowChangeEvent(((tblCOI_InvestigationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblCOI_InvestigationRow(tblCOI_InvestigationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblCOI_InvestigationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblCOI_savedSearchDataTable : global::System.Data.TypedTableBase<tblCOI_savedSearchRow> {
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnparam1;
            
            private global::System.Data.DataColumn columnparam2;
            
            private global::System.Data.DataColumn columnparam3;
            
            private global::System.Data.DataColumn columnparam4;
            
            private global::System.Data.DataColumn columnoptional5;
            
            private global::System.Data.DataColumn columnoptional6;
            
            private global::System.Data.DataColumn columnsaveDate;
            
            private global::System.Data.DataColumn columnoptional7;
            
            private global::System.Data.DataColumn columnoptional8;
            
            private global::System.Data.DataColumn columnboolean09;
            
            private global::System.Data.DataColumn columnboolean10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchDataTable() {
                this.TableName = "tblCOI_savedSearch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblCOI_savedSearchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblCOI_savedSearchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param1Column {
                get {
                    return this.columnparam1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param2Column {
                get {
                    return this.columnparam2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param3Column {
                get {
                    return this.columnparam3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param4Column {
                get {
                    return this.columnparam4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn optional5Column {
                get {
                    return this.columnoptional5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn optional6Column {
                get {
                    return this.columnoptional6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn saveDateColumn {
                get {
                    return this.columnsaveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn optional7Column {
                get {
                    return this.columnoptional7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn optional8Column {
                get {
                    return this.columnoptional8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn boolean09Column {
                get {
                    return this.columnboolean09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn boolean10Column {
                get {
                    return this.columnboolean10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchRow this[int index] {
                get {
                    return ((tblCOI_savedSearchRow)(this.Rows[index]));
                }
            }
            
            public event tblCOI_savedSearchRowChangeEventHandler tblCOI_savedSearchRowChanging;
            
            public event tblCOI_savedSearchRowChangeEventHandler tblCOI_savedSearchRowChanged;
            
            public event tblCOI_savedSearchRowChangeEventHandler tblCOI_savedSearchRowDeleting;
            
            public event tblCOI_savedSearchRowChangeEventHandler tblCOI_savedSearchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblCOI_savedSearchRow(tblCOI_savedSearchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchRow AddtblCOI_savedSearchRow(string description, string type, string param1, string param2, string param3, string param4, string optional5, string optional6, System.DateTime saveDate, string optional7, string optional8, bool boolean09, bool boolean10) {
                tblCOI_savedSearchRow rowtblCOI_savedSearchRow = ((tblCOI_savedSearchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        description,
                        type,
                        param1,
                        param2,
                        param3,
                        param4,
                        optional5,
                        optional6,
                        saveDate,
                        optional7,
                        optional8,
                        boolean09,
                        boolean10};
                rowtblCOI_savedSearchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblCOI_savedSearchRow);
                return rowtblCOI_savedSearchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchRow FindBydescriptiontype(string description, string type) {
                return ((tblCOI_savedSearchRow)(this.Rows.Find(new object[] {
                            description,
                            type})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblCOI_savedSearchDataTable cln = ((tblCOI_savedSearchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblCOI_savedSearchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndescription = base.Columns["description"];
                this.columntype = base.Columns["type"];
                this.columnparam1 = base.Columns["param1"];
                this.columnparam2 = base.Columns["param2"];
                this.columnparam3 = base.Columns["param3"];
                this.columnparam4 = base.Columns["param4"];
                this.columnoptional5 = base.Columns["optional5"];
                this.columnoptional6 = base.Columns["optional6"];
                this.columnsaveDate = base.Columns["saveDate"];
                this.columnoptional7 = base.Columns["optional7"];
                this.columnoptional8 = base.Columns["optional8"];
                this.columnboolean09 = base.Columns["boolean09"];
                this.columnboolean10 = base.Columns["boolean10"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnparam1 = new global::System.Data.DataColumn("param1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparam1);
                this.columnparam2 = new global::System.Data.DataColumn("param2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparam2);
                this.columnparam3 = new global::System.Data.DataColumn("param3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparam3);
                this.columnparam4 = new global::System.Data.DataColumn("param4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparam4);
                this.columnoptional5 = new global::System.Data.DataColumn("optional5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoptional5);
                this.columnoptional6 = new global::System.Data.DataColumn("optional6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoptional6);
                this.columnsaveDate = new global::System.Data.DataColumn("saveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaveDate);
                this.columnoptional7 = new global::System.Data.DataColumn("optional7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoptional7);
                this.columnoptional8 = new global::System.Data.DataColumn("optional8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoptional8);
                this.columnboolean09 = new global::System.Data.DataColumn("boolean09", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnboolean09);
                this.columnboolean10 = new global::System.Data.DataColumn("boolean10", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnboolean10);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndescription,
                                this.columntype}, true));
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
                this.columntype.AllowDBNull = false;
                this.columntype.MaxLength = 50;
                this.columnparam1.AllowDBNull = false;
                this.columnparam1.MaxLength = 2147483647;
                this.columnparam2.AllowDBNull = false;
                this.columnparam2.MaxLength = 2147483647;
                this.columnparam3.AllowDBNull = false;
                this.columnparam3.MaxLength = 2147483647;
                this.columnparam4.AllowDBNull = false;
                this.columnparam4.MaxLength = 2147483647;
                this.columnoptional5.MaxLength = 50;
                this.columnoptional6.MaxLength = 50;
                this.columnsaveDate.AllowDBNull = false;
                this.columnoptional7.MaxLength = 50;
                this.columnoptional8.MaxLength = 50;
                this.columnboolean09.AllowDBNull = false;
                this.columnboolean10.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchRow NewtblCOI_savedSearchRow() {
                return ((tblCOI_savedSearchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblCOI_savedSearchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblCOI_savedSearchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblCOI_savedSearchRowChanged != null)) {
                    this.tblCOI_savedSearchRowChanged(this, new tblCOI_savedSearchRowChangeEvent(((tblCOI_savedSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblCOI_savedSearchRowChanging != null)) {
                    this.tblCOI_savedSearchRowChanging(this, new tblCOI_savedSearchRowChangeEvent(((tblCOI_savedSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblCOI_savedSearchRowDeleted != null)) {
                    this.tblCOI_savedSearchRowDeleted(this, new tblCOI_savedSearchRowChangeEvent(((tblCOI_savedSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblCOI_savedSearchRowDeleting != null)) {
                    this.tblCOI_savedSearchRowDeleting(this, new tblCOI_savedSearchRowChangeEvent(((tblCOI_savedSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblCOI_savedSearchRow(tblCOI_savedSearchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                secCrawlerData ds = new secCrawlerData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblCOI_savedSearchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSEC_FormsLocalBLOBRow : global::System.Data.DataRow {
            
            private tblSEC_FormsLocalBLOBDataTable tabletblSEC_FormsLocalBLOB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_FormsLocalBLOBRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSEC_FormsLocalBLOB = ((tblSEC_FormsLocalBLOBDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FormID {
                get {
                    return ((global::System.Guid)(this[this.tabletblSEC_FormsLocalBLOB.FormIDColumn]));
                }
                set {
                    this[this.tabletblSEC_FormsLocalBLOB.FormIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tabletblSEC_FormsLocalBLOB.TextColumn]));
                }
                set {
                    this[this.tabletblSEC_FormsLocalBLOB.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow tblSEC_FormsRow {
                get {
                    return ((tblSEC_FormsRow)(this.GetParentRow(this.Table.ParentRelations["FK_tblSEC_FormsLocalBLOB_tblSEC_Forms"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tblSEC_FormsLocalBLOB_tblSEC_Forms"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSEC_FormsRow : global::System.Data.DataRow {
            
            private tblSEC_FormsDataTable tabletblSEC_Forms;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_FormsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSEC_Forms = ((tblSEC_FormsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FormID {
                get {
                    return ((global::System.Guid)(this[this.tabletblSEC_Forms.FormIDColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms.FormIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompanyCIK {
                get {
                    return ((decimal)(this[this.tabletblSEC_Forms.CompanyCIKColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms.CompanyCIKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    return ((string)(this[this.tabletblSEC_Forms.CompanyNameColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormType {
                get {
                    return ((string)(this[this.tabletblSEC_Forms.FormTypeColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms.FormTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FormDate {
                get {
                    return ((global::System.DateTime)(this[this.tabletblSEC_Forms.FormDateColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms.FormDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormPartialURL {
                get {
                    return ((string)(this[this.tabletblSEC_Forms.FormPartialURLColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms.FormPartialURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastDownloaded {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblSEC_Forms.LastDownloadedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastDownloaded\' in table \'tblSEC_Forms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblSEC_Forms.LastDownloadedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastIngested {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblSEC_Forms.LastIngestedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastIngested\' in table \'tblSEC_Forms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblSEC_Forms.LastIngestedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastParsed {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblSEC_Forms.LastParsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastParsed\' in table \'tblSEC_Forms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblSEC_Forms.LastParsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRow tblSEC_FormTypeRow {
                get {
                    return ((tblSEC_FormTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_tblSEC_Forms_tblSEC_FormType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tblSEC_Forms_tblSEC_FormType"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRow tblSEC_CompanyNamesRowParent {
                get {
                    return ((tblSEC_CompanyNamesRow)(this.GetParentRow(this.Table.ParentRelations["FK_tblSEC_Forms_tblSEC_CompanyNames"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tblSEC_Forms_tblSEC_CompanyNames"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastDownloadedNull() {
                return this.IsNull(this.tabletblSEC_Forms.LastDownloadedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastDownloadedNull() {
                this[this.tabletblSEC_Forms.LastDownloadedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastIngestedNull() {
                return this.IsNull(this.tabletblSEC_Forms.LastIngestedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastIngestedNull() {
                this[this.tabletblSEC_Forms.LastIngestedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastParsedNull() {
                return this.IsNull(this.tabletblSEC_Forms.LastParsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastParsedNull() {
                this[this.tabletblSEC_Forms.LastParsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRow[] GettblSEC_FormsLocalBLOBRows() {
                if ((this.Table.ChildRelations["FK_tblSEC_FormsLocalBLOB_tblSEC_Forms"] == null)) {
                    return new tblSEC_FormsLocalBLOBRow[0];
                }
                else {
                    return ((tblSEC_FormsLocalBLOBRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tblSEC_FormsLocalBLOB_tblSEC_Forms"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSEC_FormTypeRow : global::System.Data.DataRow {
            
            private tblSEC_FormTypeDataTable tabletblSEC_FormType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_FormTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSEC_FormType = ((tblSEC_FormTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string formtype {
                get {
                    return ((string)(this[this.tabletblSEC_FormType.formtypeColumn]));
                }
                set {
                    this[this.tabletblSEC_FormType.formtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool alwaysDownload {
                get {
                    return ((bool)(this[this.tabletblSEC_FormType.alwaysDownloadColumn]));
                }
                set {
                    this[this.tabletblSEC_FormType.alwaysDownloadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool alwaysIngest {
                get {
                    return ((bool)(this[this.tabletblSEC_FormType.alwaysIngestColumn]));
                }
                set {
                    this[this.tabletblSEC_FormType.alwaysIngestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow[] GettblSEC_FormsRows() {
                if ((this.Table.ChildRelations["FK_tblSEC_Forms_tblSEC_FormType"] == null)) {
                    return new tblSEC_FormsRow[0];
                }
                else {
                    return ((tblSEC_FormsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tblSEC_Forms_tblSEC_FormType"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblCOI_InvestigationCompanyRow : global::System.Data.DataRow {
            
            private tblCOI_InvestigationCompanyDataTable tabletblCOI_InvestigationCompany;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblCOI_InvestigationCompanyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblCOI_InvestigationCompany = ((tblCOI_InvestigationCompanyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompanyCIK {
                get {
                    return ((decimal)(this[this.tabletblCOI_InvestigationCompany.CompanyCIKColumn]));
                }
                set {
                    this[this.tabletblCOI_InvestigationCompany.CompanyCIKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvestigationID {
                get {
                    return ((int)(this[this.tabletblCOI_InvestigationCompany.InvestigationIDColumn]));
                }
                set {
                    this[this.tabletblCOI_InvestigationCompany.InvestigationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isExcluded {
                get {
                    return ((bool)(this[this.tabletblCOI_InvestigationCompany.isExcludedColumn]));
                }
                set {
                    this[this.tabletblCOI_InvestigationCompany.isExcludedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MatchFoundVia {
                get {
                    return ((string)(this[this.tabletblCOI_InvestigationCompany.MatchFoundViaColumn]));
                }
                set {
                    this[this.tabletblCOI_InvestigationCompany.MatchFoundViaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRow tblCOI_InvestigationRow {
                get {
                    return ((tblCOI_InvestigationRow)(this.GetParentRow(this.Table.ParentRelations["FK_tblCOI_InvestigationCompany_tblCOI_Investigation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tblCOI_InvestigationCompany_tblCOI_Investigation"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSEC_CompanyNamesRow : global::System.Data.DataRow {
            
            private tblSEC_CompanyNamesDataTable tabletblSEC_CompanyNames;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_CompanyNamesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSEC_CompanyNames = ((tblSEC_CompanyNamesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompanyCIK {
                get {
                    return ((decimal)(this[this.tabletblSEC_CompanyNames.CompanyCIKColumn]));
                }
                set {
                    this[this.tabletblSEC_CompanyNames.CompanyCIKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    return ((string)(this[this.tabletblSEC_CompanyNames.CompanyNameColumn]));
                }
                set {
                    this[this.tabletblSEC_CompanyNames.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow[] GettblSEC_FormsRows() {
                if ((this.Table.ChildRelations["FK_tblSEC_Forms_tblSEC_CompanyNames"] == null)) {
                    return new tblSEC_FormsRow[0];
                }
                else {
                    return ((tblSEC_FormsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tblSEC_Forms_tblSEC_CompanyNames"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSEC_Forms_snippetRow : global::System.Data.DataRow {
            
            private tblSEC_Forms_snippetDataTable tabletblSEC_Forms_snippet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSEC_Forms_snippetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSEC_Forms_snippet = ((tblSEC_Forms_snippetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FormID {
                get {
                    return ((global::System.Guid)(this[this.tabletblSEC_Forms_snippet.FormIDColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms_snippet.FormIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int subdoc_sequence {
                get {
                    return ((int)(this[this.tabletblSEC_Forms_snippet.subdoc_sequenceColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms_snippet.subdoc_sequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string snippet {
                get {
                    return ((string)(this[this.tabletblSEC_Forms_snippet.snippetColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms_snippet.snippetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string criteria {
                get {
                    return ((string)(this[this.tabletblSEC_Forms_snippet.criteriaColumn]));
                }
                set {
                    this[this.tabletblSEC_Forms_snippet.criteriaColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblCOI_InvestigationRow : global::System.Data.DataRow {
            
            private tblCOI_InvestigationDataTable tabletblCOI_Investigation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblCOI_InvestigationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblCOI_Investigation = ((tblCOI_InvestigationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvestigationID {
                get {
                    return ((int)(this[this.tabletblCOI_Investigation.InvestigationIDColumn]));
                }
                set {
                    this[this.tabletblCOI_Investigation.InvestigationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvestigationShortName {
                get {
                    return ((string)(this[this.tabletblCOI_Investigation.InvestigationShortNameColumn]));
                }
                set {
                    this[this.tabletblCOI_Investigation.InvestigationShortNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvestigationNotes {
                get {
                    return ((string)(this[this.tabletblCOI_Investigation.InvestigationNotesColumn]));
                }
                set {
                    this[this.tabletblCOI_Investigation.InvestigationNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRow[] GettblCOI_InvestigationCompanyRows() {
                if ((this.Table.ChildRelations["FK_tblCOI_InvestigationCompany_tblCOI_Investigation"] == null)) {
                    return new tblCOI_InvestigationCompanyRow[0];
                }
                else {
                    return ((tblCOI_InvestigationCompanyRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tblCOI_InvestigationCompany_tblCOI_Investigation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblCOI_savedSearchRow : global::System.Data.DataRow {
            
            private tblCOI_savedSearchDataTable tabletblCOI_savedSearch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblCOI_savedSearchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblCOI_savedSearch = ((tblCOI_savedSearchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tabletblCOI_savedSearch.descriptionColumn]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tabletblCOI_savedSearch.typeColumn]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param1 {
                get {
                    return ((string)(this[this.tabletblCOI_savedSearch.param1Column]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.param1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param2 {
                get {
                    return ((string)(this[this.tabletblCOI_savedSearch.param2Column]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.param2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param3 {
                get {
                    return ((string)(this[this.tabletblCOI_savedSearch.param3Column]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.param3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param4 {
                get {
                    return ((string)(this[this.tabletblCOI_savedSearch.param4Column]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.param4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string optional5 {
                get {
                    try {
                        return ((string)(this[this.tabletblCOI_savedSearch.optional5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'optional5\' in table \'tblCOI_savedSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblCOI_savedSearch.optional5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string optional6 {
                get {
                    try {
                        return ((string)(this[this.tabletblCOI_savedSearch.optional6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'optional6\' in table \'tblCOI_savedSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblCOI_savedSearch.optional6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime saveDate {
                get {
                    return ((global::System.DateTime)(this[this.tabletblCOI_savedSearch.saveDateColumn]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.saveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string optional7 {
                get {
                    try {
                        return ((string)(this[this.tabletblCOI_savedSearch.optional7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'optional7\' in table \'tblCOI_savedSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblCOI_savedSearch.optional7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string optional8 {
                get {
                    try {
                        return ((string)(this[this.tabletblCOI_savedSearch.optional8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'optional8\' in table \'tblCOI_savedSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblCOI_savedSearch.optional8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool boolean09 {
                get {
                    return ((bool)(this[this.tabletblCOI_savedSearch.boolean09Column]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.boolean09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool boolean10 {
                get {
                    return ((bool)(this[this.tabletblCOI_savedSearch.boolean10Column]));
                }
                set {
                    this[this.tabletblCOI_savedSearch.boolean10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isoptional5Null() {
                return this.IsNull(this.tabletblCOI_savedSearch.optional5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setoptional5Null() {
                this[this.tabletblCOI_savedSearch.optional5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isoptional6Null() {
                return this.IsNull(this.tabletblCOI_savedSearch.optional6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setoptional6Null() {
                this[this.tabletblCOI_savedSearch.optional6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isoptional7Null() {
                return this.IsNull(this.tabletblCOI_savedSearch.optional7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setoptional7Null() {
                this[this.tabletblCOI_savedSearch.optional7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isoptional8Null() {
                return this.IsNull(this.tabletblCOI_savedSearch.optional8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setoptional8Null() {
                this[this.tabletblCOI_savedSearch.optional8Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSEC_FormsLocalBLOBRowChangeEvent : global::System.EventArgs {
            
            private tblSEC_FormsLocalBLOBRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRowChangeEvent(tblSEC_FormsLocalBLOBRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsLocalBLOBRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSEC_FormsRowChangeEvent : global::System.EventArgs {
            
            private tblSEC_FormsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRowChangeEvent(tblSEC_FormsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSEC_FormTypeRowChangeEvent : global::System.EventArgs {
            
            private tblSEC_FormTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRowChangeEvent(tblSEC_FormTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_FormTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblCOI_InvestigationCompanyRowChangeEvent : global::System.EventArgs {
            
            private tblCOI_InvestigationCompanyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRowChangeEvent(tblCOI_InvestigationCompanyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationCompanyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSEC_CompanyNamesRowChangeEvent : global::System.EventArgs {
            
            private tblSEC_CompanyNamesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRowChangeEvent(tblSEC_CompanyNamesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_CompanyNamesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSEC_Forms_snippetRowChangeEvent : global::System.EventArgs {
            
            private tblSEC_Forms_snippetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetRowChangeEvent(tblSEC_Forms_snippetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSEC_Forms_snippetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblCOI_InvestigationRowChangeEvent : global::System.EventArgs {
            
            private tblCOI_InvestigationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRowChangeEvent(tblCOI_InvestigationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_InvestigationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblCOI_savedSearchRowChangeEvent : global::System.EventArgs {
            
            private tblCOI_savedSearchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchRowChangeEvent(tblCOI_savedSearchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblCOI_savedSearchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SECCrawler.DAL.secCrawlerDataTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSEC_FormsLocalBLOBTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSEC_FormsLocalBLOBTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSEC_FormsLocalBLOB";
            tableMapping.ColumnMappings.Add("FormID", "FormID");
            tableMapping.ColumnMappings.Add("Text", "Text");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblSEC_FormsLocalBLOB] WHERE (([FormID] = @Original_FormID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblSEC_FormsLocalBLOB] ([FormID], [Text]) VALUES (@FormID, @Te" +
                "xt);\r\nSELECT FormID, Text FROM tblSEC_FormsLocalBLOB WHERE (FormID = @FormID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Text", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblSEC_FormsLocalBLOB] SET [FormID] = @FormID, [Text] = @Text WHERE" +
                " (([FormID] = @Original_FormID));\r\nSELECT FormID, Text FROM tblSEC_FormsLocalBLO" +
                "B WHERE (FormID = @FormID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Text", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FormID, Text FROM dbo.tblSEC_FormsLocalBLOB\r\nwhere formID=@SourceFormID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SourceFormID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblSEC_FormsLocalBLOBDataTable dataTable, System.Guid SourceFormID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(SourceFormID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblSEC_FormsLocalBLOBDataTable GetData(System.Guid SourceFormID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(SourceFormID));
            secCrawlerData.tblSEC_FormsLocalBLOBDataTable dataTable = new secCrawlerData.tblSEC_FormsLocalBLOBDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblSEC_FormsLocalBLOBDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblSEC_FormsLocalBLOB");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_FormID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_FormID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid FormID, string Text) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(FormID));
            if ((Text == null)) {
                throw new global::System.ArgumentNullException("Text");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid FormID, string Text, System.Guid Original_FormID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(FormID));
            if ((Text == null)) {
                throw new global::System.ArgumentNullException("Text");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Text));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(Original_FormID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Text, System.Guid Original_FormID) {
            return this.Update(Original_FormID, Text, Original_FormID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSEC_FormsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSEC_FormsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSEC_Forms";
            tableMapping.ColumnMappings.Add("FormID", "FormID");
            tableMapping.ColumnMappings.Add("CompanyCIK", "CompanyCIK");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("FormType", "FormType");
            tableMapping.ColumnMappings.Add("FormDate", "FormDate");
            tableMapping.ColumnMappings.Add("FormPartialURL", "FormPartialURL");
            tableMapping.ColumnMappings.Add("LastDownloaded", "LastDownloaded");
            tableMapping.ColumnMappings.Add("LastIngested", "LastIngested");
            tableMapping.ColumnMappings.Add("LastParsed", "LastParsed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblSEC_Forms] WHERE (([FormID] = @Original_FormID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblSEC_Forms] ([FormID], [CompanyCIK], [CompanyName], [FormType], [FormDate], [FormPartialURL], [LastDownloaded], [LastIngested], [LastParsed]) VALUES (@FormID, @CompanyCIK, @CompanyName, @FormType, @FormDate, @FormPartialURL, @LastDownloaded, @LastIngested, @LastParsed)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormPartialURL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormPartialURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastDownloaded", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastDownloaded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastIngested", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastIngested", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastParsed", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastParsed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblSEC_Forms] SET [FormID] = @FormID, [CompanyCIK] = @CompanyCIK, [CompanyName] = @CompanyName, [FormType] = @FormType, [FormDate] = @FormDate, [FormPartialURL] = @FormPartialURL, [LastDownloaded] = @LastDownloaded, [LastIngested] = @LastIngested, [LastParsed] = @LastParsed WHERE (([FormID] = @Original_FormID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormPartialURL", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormPartialURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastDownloaded", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastDownloaded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastIngested", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastIngested", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastParsed", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastParsed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FormID, CompanyCIK, CompanyName, FormType, FormDate, FormPartialURL, LastD" +
                "ownloaded, LastIngested, LastParsed FROM dbo.tblSEC_Forms";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.spCOI_getItemFromDownloadQueue";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT FormID, CompanyCIK, CompanyName, FormType, FormDate, FormPartialURL, LastD" +
                "ownloaded, LastIngested, LastParsed FROM dbo.tblSEC_Forms\r\nwhere FormID=@Selecte" +
                "dFormID";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectedFormID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.spCOI_fullTextSearchByFormType";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SearchCriteria", global::System.Data.SqlDbType.VarChar, 1500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@formType", global::System.Data.SqlDbType.VarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.spCOI_getItemFromIngestQueue";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT top 100 f.*\r\n  FROM tblSEC_Forms f\r\n  join tblSEC_FormsLocalBLOB fb\r\n    o" +
                "n fb.FormID=f.FormID\r\n  left outer\r\n  join tblSEC_Forms_snippet fs\r\n    on f.For" +
                "mID=fs.FormID\r\n where fs.subdoc_sequence is null";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.SP_getFormsWithNoSnippetByCriteria";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@criteria", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@formCriteria", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblSEC_FormsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDownloadQ(secCrawlerData.tblSEC_FormsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetDataByDownloadQ() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFormID(secCrawlerData.tblSEC_FormsDataTable dataTable, System.Guid SelectedFormID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(SelectedFormID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetDataByFormID(System.Guid SelectedFormID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(SelectedFormID));
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFullTextSearchAndFormType(secCrawlerData.tblSEC_FormsDataTable dataTable, string SearchCriteria, string formType) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((SearchCriteria == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(SearchCriteria));
            }
            if ((formType == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(formType));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetDataByFullTextSearchAndFormType(string SearchCriteria, string formType) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((SearchCriteria == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(SearchCriteria));
            }
            if ((formType == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(formType));
            }
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIngestQ(secCrawlerData.tblSEC_FormsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetDataByIgestQ() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetDataByFormsWithNoSnippets() {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_FormsDataTable GetDataByFormsWithNoSnyppetByType(string criteria, string formCriteria) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((criteria == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(criteria));
            }
            if ((formCriteria == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(formCriteria));
            }
            secCrawlerData.tblSEC_FormsDataTable dataTable = new secCrawlerData.tblSEC_FormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblSEC_FormsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblSEC_Forms");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_FormID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_FormID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid FormID, decimal CompanyCIK, string CompanyName, string FormType, System.DateTime FormDate, string FormPartialURL, global::System.Nullable<global::System.DateTime> LastDownloaded, global::System.Nullable<global::System.DateTime> LastIngested, global::System.Nullable<global::System.DateTime> LastParsed) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(FormID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CompanyCIK));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CompanyName));
            }
            if ((FormType == null)) {
                throw new global::System.ArgumentNullException("FormType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FormType));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(FormDate));
            if ((FormPartialURL == null)) {
                throw new global::System.ArgumentNullException("FormPartialURL");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(FormPartialURL));
            }
            if ((LastDownloaded.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(LastDownloaded.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LastIngested.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(LastIngested.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LastParsed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(LastParsed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid FormID, decimal CompanyCIK, string CompanyName, string FormType, System.DateTime FormDate, string FormPartialURL, global::System.Nullable<global::System.DateTime> LastDownloaded, global::System.Nullable<global::System.DateTime> LastIngested, global::System.Nullable<global::System.DateTime> LastParsed, System.Guid Original_FormID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(FormID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(CompanyCIK));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CompanyName));
            }
            if ((FormType == null)) {
                throw new global::System.ArgumentNullException("FormType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FormType));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(FormDate));
            if ((FormPartialURL == null)) {
                throw new global::System.ArgumentNullException("FormPartialURL");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(FormPartialURL));
            }
            if ((LastDownloaded.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(LastDownloaded.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LastIngested.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(LastIngested.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LastParsed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(LastParsed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(Original_FormID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CompanyCIK, string CompanyName, string FormType, System.DateTime FormDate, string FormPartialURL, global::System.Nullable<global::System.DateTime> LastDownloaded, global::System.Nullable<global::System.DateTime> LastIngested, global::System.Nullable<global::System.DateTime> LastParsed, System.Guid Original_FormID) {
            return this.Update(Original_FormID, CompanyCIK, CompanyName, FormType, FormDate, FormPartialURL, LastDownloaded, LastIngested, LastParsed, Original_FormID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSEC_FormTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSEC_FormTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSEC_FormType";
            tableMapping.ColumnMappings.Add("formtype", "formtype");
            tableMapping.ColumnMappings.Add("alwaysDownload", "alwaysDownload");
            tableMapping.ColumnMappings.Add("alwaysIngest", "alwaysIngest");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblSEC_FormType] WHERE (([formtype] = @Original_formtype) AND " +
                "([alwaysDownload] = @Original_alwaysDownload) AND ([alwaysIngest] = @Original_al" +
                "waysIngest))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_formtype", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "formtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_alwaysDownload", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysDownload", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_alwaysIngest", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysIngest", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblSEC_FormType] ([formtype], [alwaysDownload], [alwaysIngest]" +
                ") VALUES (@formtype, @alwaysDownload, @alwaysIngest);\r\nSELECT formtype, alwaysDo" +
                "wnload, alwaysIngest FROM tblSEC_FormType WHERE (formtype = @formtype)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@formtype", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "formtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@alwaysDownload", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysDownload", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@alwaysIngest", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysIngest", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblSEC_FormType] SET [formtype] = @formtype, [alwaysDownload] = @alwaysDownload, [alwaysIngest] = @alwaysIngest WHERE (([formtype] = @Original_formtype) AND ([alwaysDownload] = @Original_alwaysDownload) AND ([alwaysIngest] = @Original_alwaysIngest));
SELECT formtype, alwaysDownload, alwaysIngest FROM tblSEC_FormType WHERE (formtype = @formtype)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@formtype", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "formtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@alwaysDownload", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysDownload", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@alwaysIngest", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysIngest", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_formtype", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "formtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_alwaysDownload", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysDownload", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_alwaysIngest", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "alwaysIngest", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT formtype, alwaysDownload, alwaysIngest FROM dbo.tblSEC_FormType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblSEC_FormTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblSEC_FormTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblSEC_FormTypeDataTable dataTable = new secCrawlerData.tblSEC_FormTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblSEC_FormTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblSEC_FormType");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_formtype, bool Original_alwaysDownload, bool Original_alwaysIngest) {
            if ((Original_formtype == null)) {
                throw new global::System.ArgumentNullException("Original_formtype");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_formtype));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_alwaysDownload));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_alwaysIngest));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string formtype, bool alwaysDownload, bool alwaysIngest) {
            if ((formtype == null)) {
                throw new global::System.ArgumentNullException("formtype");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(formtype));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(alwaysDownload));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(alwaysIngest));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string formtype, bool alwaysDownload, bool alwaysIngest, string Original_formtype, bool Original_alwaysDownload, bool Original_alwaysIngest) {
            if ((formtype == null)) {
                throw new global::System.ArgumentNullException("formtype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(formtype));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(alwaysDownload));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(alwaysIngest));
            if ((Original_formtype == null)) {
                throw new global::System.ArgumentNullException("Original_formtype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_formtype));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Original_alwaysDownload));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Original_alwaysIngest));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(bool alwaysDownload, bool alwaysIngest, string Original_formtype, bool Original_alwaysDownload, bool Original_alwaysIngest) {
            return this.Update(Original_formtype, alwaysDownload, alwaysIngest, Original_formtype, Original_alwaysDownload, Original_alwaysIngest);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblCOI_InvestigationCompanyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblCOI_InvestigationCompanyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblCOI_InvestigationCompany";
            tableMapping.ColumnMappings.Add("CompanyCIK", "CompanyCIK");
            tableMapping.ColumnMappings.Add("InvestigationID", "InvestigationID");
            tableMapping.ColumnMappings.Add("isExcluded", "isExcluded");
            tableMapping.ColumnMappings.Add("MatchFoundVia", "MatchFoundVia");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblCOI_InvestigationCompany] WHERE (([CompanyCIK] = @Original_" +
                "CompanyCIK) AND ([InvestigationID] = @Original_InvestigationID) AND ([isExcluded" +
                "] = @Original_isExcluded) AND ([MatchFoundVia] = @Original_MatchFoundVia))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InvestigationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isExcluded", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isExcluded", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MatchFoundVia", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchFoundVia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblCOI_InvestigationCompany] ([CompanyCIK], [InvestigationID], [isExcluded], [MatchFoundVia]) VALUES (@CompanyCIK, @InvestigationID, @isExcluded, @MatchFoundVia);
SELECT CompanyCIK, InvestigationID, isExcluded, MatchFoundVia FROM tblCOI_InvestigationCompany WHERE (CompanyCIK = @CompanyCIK) AND (InvestigationID = @InvestigationID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isExcluded", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isExcluded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MatchFoundVia", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchFoundVia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblCOI_InvestigationCompany] SET [CompanyCIK] = @CompanyCIK, [InvestigationID] = @InvestigationID, [isExcluded] = @isExcluded, [MatchFoundVia] = @MatchFoundVia WHERE (([CompanyCIK] = @Original_CompanyCIK) AND ([InvestigationID] = @Original_InvestigationID) AND ([isExcluded] = @Original_isExcluded) AND ([MatchFoundVia] = @Original_MatchFoundVia));
SELECT CompanyCIK, InvestigationID, isExcluded, MatchFoundVia FROM tblCOI_InvestigationCompany WHERE (CompanyCIK = @CompanyCIK) AND (InvestigationID = @InvestigationID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isExcluded", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isExcluded", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MatchFoundVia", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchFoundVia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InvestigationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isExcluded", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isExcluded", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MatchFoundVia", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchFoundVia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CompanyCIK, InvestigationID, isExcluded, MatchFoundVia FROM dbo.tblCOI_Inv" +
                "estigationCompany";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT CompanyCIK, InvestigationID, isExcluded, MatchFoundVia FROM dbo.tblCOI_Inv" +
                "estigationCompany\r\nwhere investigationid=@investigation";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@investigation", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblCOI_InvestigationCompanyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblCOI_InvestigationCompanyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblCOI_InvestigationCompanyDataTable dataTable = new secCrawlerData.tblCOI_InvestigationCompanyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInvestigation(secCrawlerData.tblCOI_InvestigationCompanyDataTable dataTable, int investigation) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(investigation));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblCOI_InvestigationCompanyDataTable GetDataByInvestigation(int investigation) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(investigation));
            secCrawlerData.tblCOI_InvestigationCompanyDataTable dataTable = new secCrawlerData.tblCOI_InvestigationCompanyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblCOI_InvestigationCompanyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblCOI_InvestigationCompany");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CompanyCIK, int Original_InvestigationID, bool Original_isExcluded, string Original_MatchFoundVia) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CompanyCIK));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_InvestigationID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_isExcluded));
            if ((Original_MatchFoundVia == null)) {
                throw new global::System.ArgumentNullException("Original_MatchFoundVia");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_MatchFoundVia));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CompanyCIK, int InvestigationID, bool isExcluded, string MatchFoundVia) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CompanyCIK));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(InvestigationID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(isExcluded));
            if ((MatchFoundVia == null)) {
                throw new global::System.ArgumentNullException("MatchFoundVia");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MatchFoundVia));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CompanyCIK, int InvestigationID, bool isExcluded, string MatchFoundVia, decimal Original_CompanyCIK, int Original_InvestigationID, bool Original_isExcluded, string Original_MatchFoundVia) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CompanyCIK));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(InvestigationID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(isExcluded));
            if ((MatchFoundVia == null)) {
                throw new global::System.ArgumentNullException("MatchFoundVia");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(MatchFoundVia));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_CompanyCIK));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_InvestigationID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_isExcluded));
            if ((Original_MatchFoundVia == null)) {
                throw new global::System.ArgumentNullException("Original_MatchFoundVia");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_MatchFoundVia));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(bool isExcluded, string MatchFoundVia, decimal Original_CompanyCIK, int Original_InvestigationID, bool Original_isExcluded, string Original_MatchFoundVia) {
            return this.Update(Original_CompanyCIK, Original_InvestigationID, isExcluded, MatchFoundVia, Original_CompanyCIK, Original_InvestigationID, Original_isExcluded, Original_MatchFoundVia);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSEC_CompanyNamesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSEC_CompanyNamesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSEC_CompanyNames";
            tableMapping.ColumnMappings.Add("CompanyCIK", "CompanyCIK");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblSEC_CompanyNames] WHERE (([CompanyCIK] = @Original_CompanyC" +
                "IK) AND ([CompanyName] = @Original_CompanyName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblSEC_CompanyNames] ([CompanyCIK], [CompanyName]) VALUES (@Co" +
                "mpanyCIK, @CompanyName);\r\nSELECT CompanyCIK, CompanyName FROM tblSEC_CompanyName" +
                "s WHERE (CompanyCIK = @CompanyCIK) AND (CompanyName = @CompanyName)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblSEC_CompanyNames] SET [CompanyCIK] = @CompanyCIK, [CompanyName] = @CompanyName WHERE (([CompanyCIK] = @Original_CompanyCIK) AND ([CompanyName] = @Original_CompanyName));
SELECT CompanyCIK, CompanyName FROM tblSEC_CompanyNames WHERE (CompanyCIK = @CompanyCIK) AND (CompanyName = @CompanyName)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyCIK", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "CompanyCIK", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CompanyCIK, CompanyName FROM dbo.tblSEC_CompanyNames";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT cn.CompanyCIK, cn.CompanyName FROM dbo.tblSEC_CompanyNames cn\r\njoin tblCOI" +
                "_InvestigationCompany ic on cn.CompanyCIK=ic.CompanyCIK";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT CompanyCIK, CompanyName FROM dbo.tblSEC_CompanyNames\r\nwhere companyName li" +
                "ke \'%\' + @CompanyName + \'%\' ";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.NVarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblSEC_CompanyNamesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblSEC_CompanyNamesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblSEC_CompanyNamesDataTable dataTable = new secCrawlerData.tblSEC_CompanyNamesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInvestigatedCompanies(secCrawlerData.tblSEC_CompanyNamesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_CompanyNamesDataTable GetDataByInvestigatedCompanies() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            secCrawlerData.tblSEC_CompanyNamesDataTable dataTable = new secCrawlerData.tblSEC_CompanyNamesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByNameSearch(secCrawlerData.tblSEC_CompanyNamesDataTable dataTable, string CompanyName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CompanyName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_CompanyNamesDataTable GetDataByNameSearch(string CompanyName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(CompanyName));
            }
            secCrawlerData.tblSEC_CompanyNamesDataTable dataTable = new secCrawlerData.tblSEC_CompanyNamesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblSEC_CompanyNamesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblSEC_CompanyNames");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CompanyCIK, string Original_CompanyName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CompanyCIK));
            if ((Original_CompanyName == null)) {
                throw new global::System.ArgumentNullException("Original_CompanyName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CompanyName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CompanyCIK, string CompanyName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CompanyCIK));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CompanyName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CompanyCIK, string CompanyName, decimal Original_CompanyCIK, string Original_CompanyName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CompanyCIK));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CompanyName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_CompanyCIK));
            if ((Original_CompanyName == null)) {
                throw new global::System.ArgumentNullException("Original_CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_CompanyName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Original_CompanyCIK, string Original_CompanyName) {
            return this.Update(Original_CompanyCIK, Original_CompanyName, Original_CompanyCIK, Original_CompanyName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSEC_Forms_snippetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSEC_Forms_snippetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSEC_Forms_snippet";
            tableMapping.ColumnMappings.Add("FormID", "FormID");
            tableMapping.ColumnMappings.Add("subdoc_sequence", "subdoc_sequence");
            tableMapping.ColumnMappings.Add("snippet", "snippet");
            tableMapping.ColumnMappings.Add("criteria", "criteria");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblSEC_Forms_snippet] WHERE (([FormID] = @Original_FormID) AND" +
                " ([subdoc_sequence] = @Original_subdoc_sequence) AND ([criteria] = @Original_cri" +
                "teria))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subdoc_sequence", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subdoc_sequence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_criteria", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "criteria", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblSEC_Forms_snippet] ([FormID], [subdoc_sequence], [snippet], [criteria]) VALUES (@FormID, @subdoc_sequence, @snippet, @criteria);
SELECT FormID, subdoc_sequence, snippet, criteria FROM tblSEC_Forms_snippet WHERE (FormID = @FormID) AND (subdoc_sequence = @subdoc_sequence)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subdoc_sequence", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subdoc_sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@snippet", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "snippet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@criteria", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "criteria", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblSEC_Forms_snippet] SET [FormID] = @FormID, [subdoc_sequence] = @subdoc_sequence, [snippet] = @snippet, [criteria] = @criteria WHERE (([FormID] = @Original_FormID) AND ([subdoc_sequence] = @Original_subdoc_sequence) AND ([criteria] = @Original_criteria));
SELECT FormID, subdoc_sequence, snippet, criteria FROM tblSEC_Forms_snippet WHERE (FormID = @FormID) AND (subdoc_sequence = @subdoc_sequence)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subdoc_sequence", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subdoc_sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@snippet", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "snippet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@criteria", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "criteria", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FormID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subdoc_sequence", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subdoc_sequence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_criteria", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "criteria", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FormID, subdoc_sequence, snippet, criteria FROM dbo.tblSEC_Forms_snippet";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT FormID, subdoc_sequence, snippet, criteria FROM dbo.tblSEC_Forms_snippet\r\n" +
                "where FormID=@formID and subdoc_sequence=@subdoc";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@formID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "FormID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subdoc", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "subdoc_sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblSEC_Forms_snippetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblSEC_Forms_snippetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblSEC_Forms_snippetDataTable dataTable = new secCrawlerData.tblSEC_Forms_snippetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFormIdAndSubDocSequence(secCrawlerData.tblSEC_Forms_snippetDataTable dataTable, System.Guid formID, int subdoc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(formID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(subdoc));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblSEC_Forms_snippetDataTable GetDataByFormIdAndSubDocSequence(System.Guid formID, int subdoc) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(formID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(subdoc));
            secCrawlerData.tblSEC_Forms_snippetDataTable dataTable = new secCrawlerData.tblSEC_Forms_snippetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblSEC_Forms_snippetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblSEC_Forms_snippet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_FormID, int Original_subdoc_sequence, string Original_criteria) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_FormID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_subdoc_sequence));
            if ((Original_criteria == null)) {
                throw new global::System.ArgumentNullException("Original_criteria");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_criteria));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid FormID, int subdoc_sequence, string snippet, string criteria) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(FormID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(subdoc_sequence));
            if ((snippet == null)) {
                throw new global::System.ArgumentNullException("snippet");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(snippet));
            }
            if ((criteria == null)) {
                throw new global::System.ArgumentNullException("criteria");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(criteria));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid FormID, int subdoc_sequence, string snippet, string criteria, System.Guid Original_FormID, int Original_subdoc_sequence, string Original_criteria) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(FormID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(subdoc_sequence));
            if ((snippet == null)) {
                throw new global::System.ArgumentNullException("snippet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(snippet));
            }
            if ((criteria == null)) {
                throw new global::System.ArgumentNullException("criteria");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(criteria));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(Original_FormID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_subdoc_sequence));
            if ((Original_criteria == null)) {
                throw new global::System.ArgumentNullException("Original_criteria");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_criteria));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string snippet, string criteria, System.Guid Original_FormID, int Original_subdoc_sequence, string Original_criteria) {
            return this.Update(Original_FormID, Original_subdoc_sequence, snippet, criteria, Original_FormID, Original_subdoc_sequence, Original_criteria);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblCOI_InvestigationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblCOI_InvestigationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblCOI_Investigation";
            tableMapping.ColumnMappings.Add("InvestigationID", "InvestigationID");
            tableMapping.ColumnMappings.Add("InvestigationShortName", "InvestigationShortName");
            tableMapping.ColumnMappings.Add("InvestigationNotes", "InvestigationNotes");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblCOI_Investigation] WHERE (([InvestigationID] = @Original_In" +
                "vestigationID) AND ([InvestigationShortName] = @Original_InvestigationShortName)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InvestigationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InvestigationShortName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationShortName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblCOI_Investigation] ([InvestigationShortName], [InvestigationNotes]) VALUES (@InvestigationShortName, @InvestigationNotes);
SELECT InvestigationID, InvestigationShortName, InvestigationNotes FROM tblCOI_Investigation WHERE (InvestigationID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationShortName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationShortName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationNotes", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationNotes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblCOI_Investigation] SET [InvestigationShortName] = @InvestigationShortName, [InvestigationNotes] = @InvestigationNotes WHERE (([InvestigationID] = @Original_InvestigationID) AND ([InvestigationShortName] = @Original_InvestigationShortName));
SELECT InvestigationID, InvestigationShortName, InvestigationNotes FROM tblCOI_Investigation WHERE (InvestigationID = @InvestigationID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationShortName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationShortName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationNotes", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationNotes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InvestigationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InvestigationShortName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationShortName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InvestigationID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "InvestigationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT InvestigationID, InvestigationShortName, InvestigationNotes FROM dbo.tblCO" +
                "I_Investigation";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblCOI_InvestigationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblCOI_InvestigationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblCOI_InvestigationDataTable dataTable = new secCrawlerData.tblCOI_InvestigationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblCOI_InvestigationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblCOI_Investigation");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_InvestigationID, string Original_InvestigationShortName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_InvestigationID));
            if ((Original_InvestigationShortName == null)) {
                throw new global::System.ArgumentNullException("Original_InvestigationShortName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_InvestigationShortName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string InvestigationShortName, string InvestigationNotes) {
            if ((InvestigationShortName == null)) {
                throw new global::System.ArgumentNullException("InvestigationShortName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(InvestigationShortName));
            }
            if ((InvestigationNotes == null)) {
                throw new global::System.ArgumentNullException("InvestigationNotes");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(InvestigationNotes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string InvestigationShortName, string InvestigationNotes, int Original_InvestigationID, string Original_InvestigationShortName, int InvestigationID) {
            if ((InvestigationShortName == null)) {
                throw new global::System.ArgumentNullException("InvestigationShortName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(InvestigationShortName));
            }
            if ((InvestigationNotes == null)) {
                throw new global::System.ArgumentNullException("InvestigationNotes");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(InvestigationNotes));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_InvestigationID));
            if ((Original_InvestigationShortName == null)) {
                throw new global::System.ArgumentNullException("Original_InvestigationShortName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_InvestigationShortName));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(InvestigationID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string InvestigationShortName, string InvestigationNotes, int Original_InvestigationID, string Original_InvestigationShortName) {
            return this.Update(InvestigationShortName, InvestigationNotes, Original_InvestigationID, Original_InvestigationShortName, Original_InvestigationID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblCOI_savedSearchTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblCOI_savedSearchTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblCOI_savedSearch";
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("param1", "param1");
            tableMapping.ColumnMappings.Add("param2", "param2");
            tableMapping.ColumnMappings.Add("param3", "param3");
            tableMapping.ColumnMappings.Add("param4", "param4");
            tableMapping.ColumnMappings.Add("optional5", "optional5");
            tableMapping.ColumnMappings.Add("optional6", "optional6");
            tableMapping.ColumnMappings.Add("saveDate", "saveDate");
            tableMapping.ColumnMappings.Add("optional7", "optional7");
            tableMapping.ColumnMappings.Add("optional8", "optional8");
            tableMapping.ColumnMappings.Add("boolean09", "boolean09");
            tableMapping.ColumnMappings.Add("boolean10", "boolean10");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[tblCOI_savedSearch] WHERE (([description] = @Original_description) AND ([type] = @Original_type) AND ([saveDate] = @Original_saveDate) AND ((@IsNull_optional5 = 1 AND [optional5] IS NULL) OR ([optional5] = @Original_optional5)) AND ((@IsNull_optional6 = 1 AND [optional6] IS NULL) OR ([optional6] = @Original_optional6)) AND ((@IsNull_optional7 = 1 AND [optional7] IS NULL) OR ([optional7] = @Original_optional7)) AND ((@IsNull_optional8 = 1 AND [optional8] IS NULL) OR ([optional8] = @Original_optional8)) AND ([boolean09] = @Original_boolean09) AND ([boolean10] = @Original_boolean10))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saveDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saveDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional6", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional7", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional8", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_boolean09", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean09", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_boolean10", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean10", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblCOI_savedSearch] ([description], [type], [saveDate], [param1], [param2], [param3], [param4], [optional5], [optional6], [optional7], [optional8], [boolean09], [boolean10]) VALUES (@description, @type, @saveDate, @param1, @param2, @param3, @param4, @optional5, @optional6, @optional7, @optional8, @boolean09, @boolean10);
SELECT description, type, saveDate, param1, param2, param3, param4, optional5, optional6, optional7, optional8, boolean09, boolean10 FROM tblCOI_savedSearch WHERE (description = @description) AND (type = @type)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saveDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param1", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param2", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param3", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param4", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional6", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional7", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional8", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@boolean09", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean09", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@boolean10", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean10", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblCOI_savedSearch] SET [description] = @description, [type] = @type, [saveDate] = @saveDate, [param1] = @param1, [param2] = @param2, [param3] = @param3, [param4] = @param4, [optional5] = @optional5, [optional6] = @optional6, [optional7] = @optional7, [optional8] = @optional8, [boolean09] = @boolean09, [boolean10] = @boolean10 WHERE (([description] = @Original_description) AND ([type] = @Original_type) AND ([saveDate] = @Original_saveDate) AND ((@IsNull_optional5 = 1 AND [optional5] IS NULL) OR ([optional5] = @Original_optional5)) AND ((@IsNull_optional6 = 1 AND [optional6] IS NULL) OR ([optional6] = @Original_optional6)) AND ((@IsNull_optional7 = 1 AND [optional7] IS NULL) OR ([optional7] = @Original_optional7)) AND ((@IsNull_optional8 = 1 AND [optional8] IS NULL) OR ([optional8] = @Original_optional8)) AND ([boolean09] = @Original_boolean09) AND ([boolean10] = @Original_boolean10));
SELECT description, type, saveDate, param1, param2, param3, param4, optional5, optional6, optional7, optional8, boolean09, boolean10 FROM tblCOI_savedSearch WHERE (description = @description) AND (type = @type)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saveDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param1", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param2", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param3", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@param4", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "param4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional6", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional7", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@optional8", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@boolean09", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean09", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@boolean10", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean10", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saveDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saveDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional5", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional6", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional7", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_optional8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_optional8", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "optional8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_boolean09", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean09", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_boolean10", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "boolean10", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SECCrawler.DAL.Properties.Settings.Default.SecCrawlerDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM dbo.tblCOI_savedSearch";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT boolean09, boolean10, description, optional5, optional6, optional7, option" +
                "al8, param1, param2, param3, param4, saveDate, type FROM tblCOI_savedSearch WHER" +
                "E (type = @type)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(secCrawlerData.tblCOI_savedSearchDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual secCrawlerData.tblCOI_savedSearchDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            secCrawlerData.tblCOI_savedSearchDataTable dataTable = new secCrawlerData.tblCOI_savedSearchDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByType(secCrawlerData.tblCOI_savedSearchDataTable dataTable, string type) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((type == null)) {
                throw new global::System.ArgumentNullException("type");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(type));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual secCrawlerData.tblCOI_savedSearchDataTable GetDataByType(string type) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((type == null)) {
                throw new global::System.ArgumentNullException("type");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(type));
            }
            secCrawlerData.tblCOI_savedSearchDataTable dataTable = new secCrawlerData.tblCOI_savedSearchDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData.tblCOI_savedSearchDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(secCrawlerData dataSet) {
            return this.Adapter.Update(dataSet, "tblCOI_savedSearch");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_description, string Original_type, System.DateTime Original_saveDate, string Original_optional5, string Original_optional6, string Original_optional7, string Original_optional8, bool Original_boolean09, bool Original_boolean10) {
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_description));
            }
            if ((Original_type == null)) {
                throw new global::System.ArgumentNullException("Original_type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_type));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_saveDate));
            if ((Original_optional5 == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_optional5));
            }
            if ((Original_optional6 == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_optional6));
            }
            if ((Original_optional7 == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_optional7));
            }
            if ((Original_optional8 == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_optional8));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_boolean09));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_boolean10));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string description, string type, System.DateTime saveDate, string param1, string param2, string param3, string param4, string optional5, string optional6, string optional7, string optional8, bool boolean09, bool boolean10) {
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(description));
            }
            if ((type == null)) {
                throw new global::System.ArgumentNullException("type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(type));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(saveDate));
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(param1));
            }
            if ((param2 == null)) {
                throw new global::System.ArgumentNullException("param2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(param2));
            }
            if ((param3 == null)) {
                throw new global::System.ArgumentNullException("param3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(param3));
            }
            if ((param4 == null)) {
                throw new global::System.ArgumentNullException("param4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(param4));
            }
            if ((optional5 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(optional5));
            }
            if ((optional6 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(optional6));
            }
            if ((optional7 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(optional7));
            }
            if ((optional8 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(optional8));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(boolean09));
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(boolean10));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string description, 
                    string type, 
                    System.DateTime saveDate, 
                    string param1, 
                    string param2, 
                    string param3, 
                    string param4, 
                    string optional5, 
                    string optional6, 
                    string optional7, 
                    string optional8, 
                    bool boolean09, 
                    bool boolean10, 
                    string Original_description, 
                    string Original_type, 
                    System.DateTime Original_saveDate, 
                    string Original_optional5, 
                    string Original_optional6, 
                    string Original_optional7, 
                    string Original_optional8, 
                    bool Original_boolean09, 
                    bool Original_boolean10) {
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(description));
            }
            if ((type == null)) {
                throw new global::System.ArgumentNullException("type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(type));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(saveDate));
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(param1));
            }
            if ((param2 == null)) {
                throw new global::System.ArgumentNullException("param2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(param2));
            }
            if ((param3 == null)) {
                throw new global::System.ArgumentNullException("param3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(param3));
            }
            if ((param4 == null)) {
                throw new global::System.ArgumentNullException("param4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(param4));
            }
            if ((optional5 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(optional5));
            }
            if ((optional6 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(optional6));
            }
            if ((optional7 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(optional7));
            }
            if ((optional8 == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(optional8));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(boolean09));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(boolean10));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_description));
            }
            if ((Original_type == null)) {
                throw new global::System.ArgumentNullException("Original_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_type));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_saveDate));
            if ((Original_optional5 == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_optional5));
            }
            if ((Original_optional6 == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_optional6));
            }
            if ((Original_optional7 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_optional7));
            }
            if ((Original_optional8 == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_optional8));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_boolean09));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_boolean10));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime saveDate, 
                    string param1, 
                    string param2, 
                    string param3, 
                    string param4, 
                    string optional5, 
                    string optional6, 
                    string optional7, 
                    string optional8, 
                    bool boolean09, 
                    bool boolean10, 
                    string Original_description, 
                    string Original_type, 
                    System.DateTime Original_saveDate, 
                    string Original_optional5, 
                    string Original_optional6, 
                    string Original_optional7, 
                    string Original_optional8, 
                    bool Original_boolean09, 
                    bool Original_boolean10) {
            return this.Update(Original_description, Original_type, saveDate, param1, param2, param3, param4, optional5, optional6, optional7, optional8, boolean09, boolean10, Original_description, Original_type, Original_saveDate, Original_optional5, Original_optional6, Original_optional7, Original_optional8, Original_boolean09, Original_boolean10);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private tblSEC_FormsLocalBLOBTableAdapter _tblSEC_FormsLocalBLOBTableAdapter;
        
        private tblSEC_FormsTableAdapter _tblSEC_FormsTableAdapter;
        
        private tblSEC_FormTypeTableAdapter _tblSEC_FormTypeTableAdapter;
        
        private tblCOI_InvestigationCompanyTableAdapter _tblCOI_InvestigationCompanyTableAdapter;
        
        private tblSEC_CompanyNamesTableAdapter _tblSEC_CompanyNamesTableAdapter;
        
        private tblSEC_Forms_snippetTableAdapter _tblSEC_Forms_snippetTableAdapter;
        
        private tblCOI_InvestigationTableAdapter _tblCOI_InvestigationTableAdapter;
        
        private tblCOI_savedSearchTableAdapter _tblCOI_savedSearchTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblSEC_FormsLocalBLOBTableAdapter tblSEC_FormsLocalBLOBTableAdapter {
            get {
                return this._tblSEC_FormsLocalBLOBTableAdapter;
            }
            set {
                this._tblSEC_FormsLocalBLOBTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblSEC_FormsTableAdapter tblSEC_FormsTableAdapter {
            get {
                return this._tblSEC_FormsTableAdapter;
            }
            set {
                this._tblSEC_FormsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblSEC_FormTypeTableAdapter tblSEC_FormTypeTableAdapter {
            get {
                return this._tblSEC_FormTypeTableAdapter;
            }
            set {
                this._tblSEC_FormTypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblCOI_InvestigationCompanyTableAdapter tblCOI_InvestigationCompanyTableAdapter {
            get {
                return this._tblCOI_InvestigationCompanyTableAdapter;
            }
            set {
                this._tblCOI_InvestigationCompanyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblSEC_CompanyNamesTableAdapter tblSEC_CompanyNamesTableAdapter {
            get {
                return this._tblSEC_CompanyNamesTableAdapter;
            }
            set {
                this._tblSEC_CompanyNamesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblSEC_Forms_snippetTableAdapter tblSEC_Forms_snippetTableAdapter {
            get {
                return this._tblSEC_Forms_snippetTableAdapter;
            }
            set {
                this._tblSEC_Forms_snippetTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblCOI_InvestigationTableAdapter tblCOI_InvestigationTableAdapter {
            get {
                return this._tblCOI_InvestigationTableAdapter;
            }
            set {
                this._tblCOI_InvestigationTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tblCOI_savedSearchTableAdapter tblCOI_savedSearchTableAdapter {
            get {
                return this._tblCOI_savedSearchTableAdapter;
            }
            set {
                this._tblCOI_savedSearchTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._tblSEC_FormsLocalBLOBTableAdapter != null) 
                            && (this._tblSEC_FormsLocalBLOBTableAdapter.Connection != null))) {
                    return this._tblSEC_FormsLocalBLOBTableAdapter.Connection;
                }
                if (((this._tblSEC_FormsTableAdapter != null) 
                            && (this._tblSEC_FormsTableAdapter.Connection != null))) {
                    return this._tblSEC_FormsTableAdapter.Connection;
                }
                if (((this._tblSEC_FormTypeTableAdapter != null) 
                            && (this._tblSEC_FormTypeTableAdapter.Connection != null))) {
                    return this._tblSEC_FormTypeTableAdapter.Connection;
                }
                if (((this._tblCOI_InvestigationCompanyTableAdapter != null) 
                            && (this._tblCOI_InvestigationCompanyTableAdapter.Connection != null))) {
                    return this._tblCOI_InvestigationCompanyTableAdapter.Connection;
                }
                if (((this._tblSEC_CompanyNamesTableAdapter != null) 
                            && (this._tblSEC_CompanyNamesTableAdapter.Connection != null))) {
                    return this._tblSEC_CompanyNamesTableAdapter.Connection;
                }
                if (((this._tblSEC_Forms_snippetTableAdapter != null) 
                            && (this._tblSEC_Forms_snippetTableAdapter.Connection != null))) {
                    return this._tblSEC_Forms_snippetTableAdapter.Connection;
                }
                if (((this._tblCOI_InvestigationTableAdapter != null) 
                            && (this._tblCOI_InvestigationTableAdapter.Connection != null))) {
                    return this._tblCOI_InvestigationTableAdapter.Connection;
                }
                if (((this._tblCOI_savedSearchTableAdapter != null) 
                            && (this._tblCOI_savedSearchTableAdapter.Connection != null))) {
                    return this._tblCOI_savedSearchTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._tblSEC_FormsLocalBLOBTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblSEC_FormsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblSEC_FormTypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblCOI_InvestigationCompanyTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblSEC_CompanyNamesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblSEC_Forms_snippetTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblCOI_InvestigationTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tblCOI_savedSearchTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(secCrawlerData dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tblSEC_CompanyNamesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblSEC_CompanyNames.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblSEC_CompanyNamesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblSEC_FormTypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblSEC_FormType.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblSEC_FormTypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblCOI_InvestigationTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblCOI_Investigation.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblCOI_InvestigationTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblSEC_FormsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblSEC_Forms.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblSEC_FormsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblCOI_savedSearchTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblCOI_savedSearch.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblCOI_savedSearchTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblSEC_Forms_snippetTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblSEC_Forms_snippet.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblSEC_Forms_snippetTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblSEC_FormsLocalBLOBTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblSEC_FormsLocalBLOB.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblSEC_FormsLocalBLOBTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tblCOI_InvestigationCompanyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tblCOI_InvestigationCompany.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tblCOI_InvestigationCompanyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(secCrawlerData dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tblSEC_CompanyNamesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblSEC_CompanyNames.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblSEC_CompanyNamesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblSEC_FormTypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblSEC_FormType.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblSEC_FormTypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblCOI_InvestigationTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblCOI_Investigation.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblCOI_InvestigationTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblSEC_FormsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblSEC_Forms.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblSEC_FormsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblCOI_savedSearchTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblCOI_savedSearch.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblCOI_savedSearchTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblSEC_Forms_snippetTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblSEC_Forms_snippet.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblSEC_Forms_snippetTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblSEC_FormsLocalBLOBTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblSEC_FormsLocalBLOB.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblSEC_FormsLocalBLOBTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tblCOI_InvestigationCompanyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tblCOI_InvestigationCompany.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tblCOI_InvestigationCompanyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(secCrawlerData dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tblCOI_InvestigationCompanyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblCOI_InvestigationCompany.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblCOI_InvestigationCompanyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblSEC_FormsLocalBLOBTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblSEC_FormsLocalBLOB.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblSEC_FormsLocalBLOBTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblSEC_Forms_snippetTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblSEC_Forms_snippet.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblSEC_Forms_snippetTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblCOI_savedSearchTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblCOI_savedSearch.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblCOI_savedSearchTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblSEC_FormsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblSEC_Forms.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblSEC_FormsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblCOI_InvestigationTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblCOI_Investigation.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblCOI_InvestigationTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblSEC_FormTypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblSEC_FormType.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblSEC_FormTypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tblSEC_CompanyNamesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tblSEC_CompanyNames.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tblSEC_CompanyNamesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(secCrawlerData dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._tblSEC_FormsLocalBLOBTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblSEC_FormsLocalBLOBTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblSEC_FormsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblSEC_FormsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblSEC_FormTypeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblSEC_FormTypeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblCOI_InvestigationCompanyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblCOI_InvestigationCompanyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblSEC_CompanyNamesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblSEC_CompanyNamesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblSEC_Forms_snippetTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblSEC_Forms_snippetTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblCOI_InvestigationTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblCOI_InvestigationTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tblCOI_savedSearchTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tblCOI_savedSearchTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._tblSEC_FormsLocalBLOBTableAdapter != null)) {
                    revertConnections.Add(this._tblSEC_FormsLocalBLOBTableAdapter, this._tblSEC_FormsLocalBLOBTableAdapter.Connection);
                    this._tblSEC_FormsLocalBLOBTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblSEC_FormsLocalBLOBTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblSEC_FormsLocalBLOBTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblSEC_FormsLocalBLOBTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblSEC_FormsLocalBLOBTableAdapter.Adapter);
                    }
                }
                if ((this._tblSEC_FormsTableAdapter != null)) {
                    revertConnections.Add(this._tblSEC_FormsTableAdapter, this._tblSEC_FormsTableAdapter.Connection);
                    this._tblSEC_FormsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblSEC_FormsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblSEC_FormsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblSEC_FormsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblSEC_FormsTableAdapter.Adapter);
                    }
                }
                if ((this._tblSEC_FormTypeTableAdapter != null)) {
                    revertConnections.Add(this._tblSEC_FormTypeTableAdapter, this._tblSEC_FormTypeTableAdapter.Connection);
                    this._tblSEC_FormTypeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblSEC_FormTypeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblSEC_FormTypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblSEC_FormTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblSEC_FormTypeTableAdapter.Adapter);
                    }
                }
                if ((this._tblCOI_InvestigationCompanyTableAdapter != null)) {
                    revertConnections.Add(this._tblCOI_InvestigationCompanyTableAdapter, this._tblCOI_InvestigationCompanyTableAdapter.Connection);
                    this._tblCOI_InvestigationCompanyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblCOI_InvestigationCompanyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblCOI_InvestigationCompanyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblCOI_InvestigationCompanyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblCOI_InvestigationCompanyTableAdapter.Adapter);
                    }
                }
                if ((this._tblSEC_CompanyNamesTableAdapter != null)) {
                    revertConnections.Add(this._tblSEC_CompanyNamesTableAdapter, this._tblSEC_CompanyNamesTableAdapter.Connection);
                    this._tblSEC_CompanyNamesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblSEC_CompanyNamesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblSEC_CompanyNamesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblSEC_CompanyNamesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblSEC_CompanyNamesTableAdapter.Adapter);
                    }
                }
                if ((this._tblSEC_Forms_snippetTableAdapter != null)) {
                    revertConnections.Add(this._tblSEC_Forms_snippetTableAdapter, this._tblSEC_Forms_snippetTableAdapter.Connection);
                    this._tblSEC_Forms_snippetTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblSEC_Forms_snippetTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblSEC_Forms_snippetTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblSEC_Forms_snippetTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblSEC_Forms_snippetTableAdapter.Adapter);
                    }
                }
                if ((this._tblCOI_InvestigationTableAdapter != null)) {
                    revertConnections.Add(this._tblCOI_InvestigationTableAdapter, this._tblCOI_InvestigationTableAdapter.Connection);
                    this._tblCOI_InvestigationTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblCOI_InvestigationTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblCOI_InvestigationTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblCOI_InvestigationTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblCOI_InvestigationTableAdapter.Adapter);
                    }
                }
                if ((this._tblCOI_savedSearchTableAdapter != null)) {
                    revertConnections.Add(this._tblCOI_savedSearchTableAdapter, this._tblCOI_savedSearchTableAdapter.Connection);
                    this._tblCOI_savedSearchTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tblCOI_savedSearchTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tblCOI_savedSearchTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tblCOI_savedSearchTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tblCOI_savedSearchTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._tblSEC_FormsLocalBLOBTableAdapter != null)) {
                    this._tblSEC_FormsLocalBLOBTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblSEC_FormsLocalBLOBTableAdapter]));
                    this._tblSEC_FormsLocalBLOBTableAdapter.Transaction = null;
                }
                if ((this._tblSEC_FormsTableAdapter != null)) {
                    this._tblSEC_FormsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblSEC_FormsTableAdapter]));
                    this._tblSEC_FormsTableAdapter.Transaction = null;
                }
                if ((this._tblSEC_FormTypeTableAdapter != null)) {
                    this._tblSEC_FormTypeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblSEC_FormTypeTableAdapter]));
                    this._tblSEC_FormTypeTableAdapter.Transaction = null;
                }
                if ((this._tblCOI_InvestigationCompanyTableAdapter != null)) {
                    this._tblCOI_InvestigationCompanyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblCOI_InvestigationCompanyTableAdapter]));
                    this._tblCOI_InvestigationCompanyTableAdapter.Transaction = null;
                }
                if ((this._tblSEC_CompanyNamesTableAdapter != null)) {
                    this._tblSEC_CompanyNamesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblSEC_CompanyNamesTableAdapter]));
                    this._tblSEC_CompanyNamesTableAdapter.Transaction = null;
                }
                if ((this._tblSEC_Forms_snippetTableAdapter != null)) {
                    this._tblSEC_Forms_snippetTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblSEC_Forms_snippetTableAdapter]));
                    this._tblSEC_Forms_snippetTableAdapter.Transaction = null;
                }
                if ((this._tblCOI_InvestigationTableAdapter != null)) {
                    this._tblCOI_InvestigationTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblCOI_InvestigationTableAdapter]));
                    this._tblCOI_InvestigationTableAdapter.Transaction = null;
                }
                if ((this._tblCOI_savedSearchTableAdapter != null)) {
                    this._tblCOI_savedSearchTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tblCOI_savedSearchTableAdapter]));
                    this._tblCOI_savedSearchTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591